//
//  ISConst.h
//  INSHOW
//
//  Created by 李亚飞 on 15/11/12.
//  Copyright © 2015年 李亚飞. All rights reserved.
//
//  定义项目中使用的常量

#import <UIKit/UIKit.h>

/**  获得appdelegate*/
#define APPDELEGATE (AppDelegate *)[[UIApplication sharedApplication] delegate]

//支持横屏
#define CANNOTSCALE AppDelegate * appDelegate = APPDELEGATE;[appDelegate setCanNotAllowRotation];
//不支持横屏
#define CANSCALE AppDelegate * appDelegate = APPDELEGATE;[appDelegate setCanAllowRotation];

/**  屏幕宽度 */
#define ISScreen_Width [UIScreen mainScreen].bounds.size.width
/**  屏幕高度 */
#define ISScreen_Height [UIScreen mainScreen].bounds.size.height
/**  RGB 颜色 */
#define ISRGBColor(r, g, b) [UIColor colorWithRed:(r/255.0) green:(g/255.0) blue:(b/255.0) alpha:1.0]
#define ISARGBColor(r, g, b, a) [UIColor colorWithRed:(r/255.0) green:(g/255.0) blue:(b/255.0) alpha:(a)]
/**  背景颜色 */
#define ISBackgroundColor ISRGBColor(220, 220, 220)
/**   字体颜色 */
#define ISFontColor ISRGBColor(64, 74, 88)
/** 常用的红色*/
#define ISRedColor ISRGBColor(255, 78, 77)
/** 常用的字体灰色*/
#define ISGrayColor ISRGBColor(179, 183, 188)
//404a58
#define ISLIKEGRAYCOLOR ISRGBColor(64, 74, 88)
//999999
#define ISGRAYCOLOR2 ISRGBColor(153, 153, 153)

//c0c3c7
#define ISGRAYCOLOR3 ISRGBColor(192, 195, 199)

//217, 217, 217
#define ISGRAYCOLOR4 ISRGBColor(217, 217, 217)

//65, 74, 89
#define ISGRAYCOLOR5 ISRGBColor(65, 74, 89)

//908b88 144, 139, 136
#define IS908B88 ISRGBColor(144, 139, 136)

//cecece 206, 206, 206
#define IScecece ISRGBColor(206, 206, 206)

//8d8986 141, 137, 134
#define IS8d8986 ISRGBColor(141, 137, 134)

//b3b7bc 179, 183, 188
#define ISB3B7BC ISRGBColor(179, 183, 188)

//67, 67, 67 #434343
#define IS434343 ISRGBColor(67, 67, 67)

//0, 4, 31 00041f
#define IS00041f ISRGBColor(0, 4, 31)

//f2f2f2 242, 242, 242
#define ISf2f2f2 ISRGBColor(242, 242, 242)

//e6e6e6 230, 230, 230
#define ISe6e6e6 ISRGBColor(230, 230, 230)

//2e2e3a 46,46,58
#define IS2e2e3a ISRGBColor(46,46,58)

//65656d 101,101,109
#define IS65656d ISRGBColor(101,101,109)

#define UIColorFromRGB(rgbValue) [UIColor \
colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 \
green:((float)((rgbValue & 0xFF00) >> 8))/255.0 \
blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

/**  测试使用 随机色 */
#define ISTestRandomColor [UIColor colorWithRed:(arc4random() % 255 / 255.0) green:(arc4random() % 255 / 255.0) blue:(arc4random() % 255 / 255.0) alpha:1.0]


/**  10号字体 */
#define ISFont_10 [UIFont systemFontOfSize:10]
/**  12号字体 */
#define ISFont_12 [UIFont systemFontOfSize:12]
/**  13号字体 */
#define ISFont_13 [UIFont systemFontOfSize:13]
/**  13号字体 */
#define ISFont_14 [UIFont systemFontOfSize:14]
/**  15号字体 */
#define ISFont_15 [UIFont systemFontOfSize:15]
/**  16号字体 */
#define ISFont_16 [UIFont systemFontOfSize:16]
/**  17号字体 */
#define ISFont_17 [UIFont systemFontOfSize:17]


/**  iPhone4  */
#define iPhone4         CGSizeEqualToSize(CGSizeMake(640, 960), [UIScreen mainScreen].currentMode.size)
/**  iPhone5_5S_5C  */
#define iPhone5_5S_5C   CGSizeEqualToSize(CGSizeMake(640, 1136), [UIScreen mainScreen].currentMode.size)
/**  iPhone6_6S  */
#define iPhone6_6S      CGSizeEqualToSize(CGSizeMake(750, 1334), [UIScreen mainScreen].currentMode.size)
/**  iPhone6_6SPlus  */
#define iPhone6_6SPlus  CGSizeEqualToSize(CGSizeMake(1125, 2001), [UIScreen mainScreen].currentMode.size) || CGSizeEqualToSize(CGSizeMake(1242, 2208), [UIScreen mainScreen].currentMode.size) || CGSizeEqualToSize(CGSizeMake(1080, 1920), [UIScreen mainScreen].currentMode.size) 


//
//  Config.h
//  M-Cut
//
//  Created by 刘海香 on 15/1/22.
//  Copyright (c) 2015年 Crab movier. All rights reserved.
//

#ifndef M_Cut_Config_h
#define M_Cut_Config_h

//获取设备大小
//NavBar高度
#define NavigationBar_HEIGHT 44
//获取屏幕 宽度、高度
#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)
#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)
//获取设备大小

//获取系统版本
#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]
#define CurrentSystemVersion [[UIDevice currentDevice] systemVersion]

//获取当前语言
#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])

//判断是否 Retina屏、设备是否ifhone 5、ifhone 6,是否是iPad
#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)
#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)
#define iPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2208), [[UIScreen mainScreen] currentMode].size) : NO)

#define isPads (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
#define iPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334),[[UIScreen mainScreen] currentMode].size) : NO)


///判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif

//检查系统版本
#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)
#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)
#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)
//-------------------------------------------------------------------------------系统------------------------------------------------------------------------------------------------------------



//-------------------------------------------------------------------------------图片------------------------------------------------------------------------------------------------------------

//读取本地图片
#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]

//定义UIImage对象
#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]

//定义UIImage对象
#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]

//建议使用前两种宏定义,性能高于后者
//-------------------------------------------------------------------------------图片-------------------------------------------------------------------------------------------------------------



//-------------------------------------------------------------------------------颜色类-----------------------------------------------------------------------------------------------------------
// rgb颜色转换（16进制->10进制）
#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

//带有RGBA的颜色设置
#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]

// 获取RGB颜色
#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define RGB(r,g,b) RGBA(r,g,b,1.0f)

//背景色
#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]

//清除背景色
#define CLEARCOLOR [UIColor clearColor]

#pragma mark - color functions
#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]
#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]

//-------------------------------------------------------------------------------颜色类------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------其他-------------------------------------------------------------------------------------------------------------
//方正黑体简体字体定义
#define FONT(F) [UIFont fontWithName:@"FZHTJW--GB1-0" size:F]


//定义一个API
#define APIURL                @"http://xxxxx/"
//登陆API
#define APILogin              [APIURL stringByAppendingString:@"Login"]

//设置View的tag属性
#define VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]
//程序的本地化,引用国际化的文件
#define MyLocal(x, ...) NSLocalizedString(x, nil)

//G－C－D
#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)

//NSUserDefaults 实例化
#define USER_DEFAULT [NSUserDefaults standardUserDefaults]


//由角度获取弧度 有弧度获取角度
#define degreesToRadian(x) (M_PI * (x) / 180.0)
#define radianToDegrees(radian) (radian*180.0)/(M_PI)

//-------------------------------------------------------------------------------其他------------------------------------------------------------------------------------------------------------




//1.首次启动判断：
#define First_Launched @"firstLaunch"

//2.ios7系统判断：

#define IsIOS7 ([[[UIDevice currentDevice] systemVersion] floatValue] >=7.0 ? YES : NO)
#define IsIOS6 ([[[UIDevice currentDevice] systemVersion] floatValue] >=6.0 ? YES : NO)
#endif

#pragma mark - 消息通知部分

//声明属性
#define CUSTOMEPORPERTY(PROPER) @property (nonatomic, copy) NSString * PROPER;

//消息表字段名称
#define DSTCONTENT              @"dstcontent"       //被评论内容的内容体
#define DSTCONTENTID            @"dstcontentid"     //被评论内容的id，即a回复b的评论，此处是b的评论内容id
#define DSTCUSTOMERID           @"dstcustomerid"    //收到消息的用户id，即被评论、被回复、被点赞等的那个用户id
#define LINKLABELID             @"linklabelid"      //系统消息的视频labelid
#define LINKTYPE                @"linktype"         //链接类型，根据它来判断使用linkurl或者linklabelid获取系统消息内容
#define LINKURL                 @"linkurl"          //系统消息的链接url
#define SRCAVATAR               @"srcavatar"        //点赞、评论、回复的那个用户的头像url
#define SRCCONTENT              @"srccontent"       //点赞、评论、回复等的内容体
#define SRCCONTENTID            @"srccontentid"     //点赞、评论、回复等内容的id
#define SRCCUSTOMERID           @"srccustomerid"    //点赞、评论、回复的那个用户的id
#define SRCNICKNAME             @"srcnickname"      //点赞、评论、回复的那个用户的昵称
#define TERM                    @"term"             //术语，用来判断是什么类型的消息
#define TIME                    @"time"             //点赞、评论、回复产生的那个时间
#define MESVIDEOID              @"videoid"          //被点赞、评论、回复的那个影片的videoid
#define VIDEOLABELID            @"videolabelid"     //被点赞、评论、回复的那个影片的话题id
#define MESVIDEOLABELNAME       @"videolabelname"   //被点赞、评论、回复的那个影片的话题name
#define MESVIDEONAME            @"videoname"        //被点赞、评论、回复的那个影片的videoname
#define VIDEOTHUMBNAIL          @"videothumbnail"   //被点赞、评论、回复的那个影片的videothumbnail
#define MESVIDEOURL             @"videourl"         //被点赞、评论、回复的那个影片的url
#define ISREAD                  @"isRead"           //这条消息有没有被读过(0是未读，1是读过)

//用户新影片提示表相关宏定义
#define USERNOPLAYVIDEOTABLE    @"Tab_newVideoPropmt"
#define LOGINUSERID             @"loginUserId"
#define ISPLAY                  @"isPlay" //0是未观看，1是已观看

//消息通知部分术语
#define PRAISETERM              @"赞了您的影片"
#define COMMENTSTERM            @"评论了您的影片"
#define CARETERM                @"关注了您"
#define COLLECTTERM             @"收藏了您的影片"
#define NEWVIDEOTERM            @"您的影片已制作完成，快来看看吧"
#define FRIENDMESSAGETERM       @"给您发了一条私信"
#define SYSTEMMESTERM           @"系统通知"
#define REPLYTERM               @"回复了您的评论"

#pragma mark - 好友部分
//好友表的名称
#define FRIENDTAB               @"Tab_Friend"

//好友表字段名
#define FRIENDID                @"id"                     //这条数据的id
#define FRIENDUSERID            @"userId"                 //好友或粉丝或关注的用户id
#define FRIENDHEADURL           @"iconURL"                //好友或粉丝或关注的头像url
#define FRIENDNICKNAME          @"nickName"               //好友或粉丝或关注的昵称
#define FRIENDVIDEONUM          @"videoNum"               //好友或粉丝或关注的那个用户的视频数量
#define FRIENDVIDEOCOLLECTTIMES @"videoCollectTimes"      //好友或粉丝或关注的那个用户的视频被收藏的数量
#define FRIENDSIGNATURE         @"signature"              //好友或粉丝或关注的那个用户的签名
#define FRIENDTYPE              @"friendType"             //标注是好友或者粉丝或者关注，该字段直接填汉字，不用数字代替
#define FRIENDWITHWHO           @"toUserId"               //这个用户的好友或者粉丝或者关注了前面的userId

#pragma mark - 好友私信表
#define FRIENDMESTAB            @"Tab_FriendMessage"            //好友私信表名称
#define FRIENDMESID             @"id"                           //每条数据的id
#define FRIENDMESSTARTUSER      @"mesStartId"                   //产生这条消息的人
#define FRIENDMESENDUSERID      @"mesEndId"                     //私信接收者
#define FRIENDSTARTUSERNICKNAME @"startUserNickName"            //产生消息的人的昵称
#define FRIENDMESREADSTATUS     @"readStatus"                   //查看状态(0是未读，1是已读)
#define FRIENDMESCONTENT        @"mesContent"                   //消息内容字符串
#define FRIENDHEADIMAGEURL      @"startUserIconUrl"             //消息发起者的头像url
#define FRIENDMESSTARTTIME      @"time"                         //消息产生的时间



//弹出提示框
#define ALERT(alertStr) UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示" message:alertStr delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil];[alert show];

//添加手势
#define ADDTAPGESTURE(SUPERVIEW, TAPMETHODNAME) SUPERVIEW.userInteractionEnabled = YES;[SUPERVIEW addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(TAPMETHODNAME:)]];

#pragma mark - 通知部分
// 通知
#define ISMaterialUploadSucceedNotification @"ISMaterialUploadSucceedNotification"

//从我的页面跳转到消息通知界面的通知
#define PUSHTOMESSAGEVC         @"pushToMessageVc"

//从我的界面跳转到好友界面的通知
#define PUSHTOFRIENDVC          @"pushToFriendVc"

//消息通知跳转的通知
#define PUSHTOMESSAGE           @"pushToMessage"

//跳转到我的主页（消息通知部分）
#define PUSHTOVIDEO             @"pushToMyVideo"
#define PUSHTOVIDEOVC           @"pushToMyVideoVc"

//好友界面跳转的通知
#define PUSHTOFRIEND            @"pushToFriend"

//修改消息通知一栏数字的通知
#define UPDATEMESNUM            @"updateMesNum"

//修改我的影片一栏数字的通知
#define UPDATENEWVIDEONUM       @"updateNewVideoNum"

//修改好友栏数字的通知
#define UPDATEFRIENDMESNUM      @"updateFriendMesNum"

//tabbarlabel的更新通知
#define UPDATETABBARLABELTEXT   @"updateTabbarLabel"


//根据badgenum的变化更新各个界面的提示数字
#define UPDATEPROPMTLABELTEXT   @"updatePropmtLabelText"

//私信消息的通知
#define PRIVATEMESNOTI          @"privateMesNoti"

//新影片生成的通知
#define NEWVIDEOBORN            @"newVideoBorn"

//app进入前台的通知
#define APPFOREGROUND @"Foreground"

//app进入后台的通知
#define APPBACKGROUND @"Background"

//选择素材时拍照完成的通知
#define RELOADPHOTOTARRAY @"reloadPhotoArray"

//素材选择的通知
#define REMOVESELECTIMAGE @"removeSelectImage"
//移除的对象key
#define REMOVEIAMGEKEY @"removeImageKey"


//更新选中的素材数组
#define UPDATESELECTIMAGEARRAY @"updateSelectImageArray"
//更新的key
#define UPDATESELECTARRAYKEY @"updateSelectArray" 

//如果素材时长超过180，就发出这个通知
#define TIMEMORENOTI @"timeMoreNoti"

//通知主页跳转到具体页面
#define PUSHTOVIDEOLABELDETAILVC @"pushToVideoLabelDetailVc"

//跳转到搜索页面
#define PUSHTOSEARCHVC @"pushToSearchVc"

//视频应该使用竖屏播放
#define PORTRAIT @"portrait"

//视频从竖屏恢复原来
#define RESTROE @"restore"

//竖屏全屏方式
#define PORTRAITFULLSCREEN @"portraitFullScreen"

//点击banner图片通知
#define CLICKBANNERIMAGE @"clickBannerImage"
#define BANNERIMAGEINFO @"bannerImageInfo"

//影片详情页输入框开始输入
#define VIDEOINPUTVIEWBEGININPUT @"videoInputViewBeginInput"
#define VIDEOINPUTVIEWENDINPUT @"videoInputViewEndInput"

//隐藏登录注册window
#define HIDDENLOGINANDREGISTERWINDOW @"hiddenLoginAndRegisterWindow"


//隐藏注册部分window
#define HIDDENLOGINANDREGISTERWINDOWNOTI  POSTNOTI(HIDDENLOGINANDREGISTERWINDOW, nil);

//发出通知
#define POSTNOTI(NOTINAME, USERINFO) [[NSNotificationCenter defaultCenter] postNotification:[[NSNotification alloc] initWithName:NOTINAME object:nil userInfo:USERINFO]]

//注册通知
#define REGISTEREDNOTI(NOTIMETHOD, NOTINAME) [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(NOTIMETHOD) name:NOTINAME object:nil]

//普通数据懒加载
#define LAZYLOADINGARRAY(LAZYMETHOD, ARRAYNAME) - (NSMutableArray *)ARRAYNAME{if (!ARRAYNAME) {ARRAYNAME = [NSMutableArray new];}return ARRAYNAME;}

//默认头像
#define DEFAULTHEADIMAGE [UIImage imageNamed:@"设置头像-0"]

//默认视频图片
#define DEFAULTVIDEOTHUMAIL [UIImage imageNamed:@"defaultVideoImage"]

//使用xib初始化cell
#define XIBCELL(LOADNIBNAME) [[[NSBundle mainBundle] loadNibNamed:LOADNIBNAME owner:nil options:nil] lastObject];

//table背景图
#define BACKPROPMTVIEW(CONDITIONS, BACKVIEWTAG, PROPMTCONTENT, YOURTABLENAME) if (CONDITIONS) {UIView * tableBackView = [[UIView alloc] initWithFrame:self.view.bounds];self.YOURTABLENAME.backgroundView = tableBackView;tableBackView.tag = BACKVIEWTAG;UILabel * tableBackLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, ISScreen_Height / 2 - 64, ISScreen_Width, 66)];[tableBackView addSubview:tableBackLabel];tableBackLabel.text = PROPMTCONTENT;tableBackLabel.textColor = [UIColor grayColor];tableBackLabel.font = [UIFont fontWithName:@"Helvetica" size:18.f];tableBackLabel.textAlignment = NSTextAlignmentCenter;tableBackLabel.numberOfLines = 0;tableBackView.hidden = NO;self.YOURTABLENAME.separatorStyle = UITableViewCellSeparatorStyleNone;}else{UIView * myView = (id)[self.view viewWithTag:BACKVIEWTAG];myView.hidden = YES;[myView removeFromSuperview];myView = nil;}

//汉字转utf-8
#define STRTOUTF8(NEEDCONVERSIONSTR) [NEEDCONVERSIONSTR stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]

#pragma mark - 当前登录用户的信息

//当前登录用户的id
#define CURRENTUSERID [UserEntity sharedSingleton].customerId

//当前登录用户的昵称
#define CURRENTUSERNICKNAME [UserEntity sharedSingleton].szNickname

//当前登录用户的头像url
#define CURRENTUSERICONURL [UserEntity sharedSingleton].szAcatar

//打印error宏
#define DEBUGLOG(NEEDPRINTFCONTENT) NSLog(@"\n当前类和函数：%s\n当前行：%d\n>>>ERROR --- %@\n\n\n", __func__, __LINE__, NEEDPRINTFCONTENT);

//打印接口调用成功信息宏
#define DEBUGSUCCESSLOG(NEEDPRINTFCONTENT) NSLog(@"\n当前类和函数：%s\n当前行：%d\n>>>SUCCESSINFO --- %@\n\n\n", __func__, __LINE__, NEEDPRINTFCONTENT);


//弱引用宏1.0
#define WEAKSELF(WEAKSELFNAME) __weak typeof(self) WEAKSELFNAME = self

//弱引用宏2.0
#define WEAKSELF2 __weak typeof(self) weakSelf = self;


//主线程刷新ui
#define MAINQUEUEUPDATEUI(UPDATECODE) dispatch_async(dispatch_get_main_queue(), ^{UPDATECODE});

//默认线程中处理数据，主线程ui操作
#define DEFAULTQUEUEANALYSISANDMAINQUEUEUPDATEUI(DEFAULTQUEUEANALYSISCODE, MAINQUEUECODE) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{DEFAULTQUEUEANALYSISCODE dispatch_async(dispatch_get_main_queue(), ^{MAINQUEUECODE});});

//在组线程中进行操作，主线程刷新ui
#define GROUPQUEUEANALYSISMAINQUEUEUPDATEUI(GROUPQUEUECODE, MAINQUEUECODE) dispatch_group_async(dispatch_group_create(), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{GROUPQUEUECODE dispatch_get_main_queue(), ^{MAINQUEUECODE});});

//根据tag获得控件
#define GETVIEWWITHTAG(VIEWNAME, CUSTOMENAME, TAG) VIEWNAME * CUSTOMENAME = (VIEWNAME *)[self.view viewWithTag:TAG];


//时间格式2016-07-21 20:12:41
#define TIMEFORMAT               @"YYYY-MM-dd hh:mm:ss"

//默认cell
#define DEFAULTCELL UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:@"cellid"];if(!cell){cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"cellid"];}return cell;


//移除所有子视图
#define REMOVEALLSUBVIEWS(THISVIEW) [THISVIEW.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)]

//如果第一次下载后台数据失败，如果有网络就重新下载（使用递归方式下载）如果没有网络就提示没有网络，并终止下载
#define RELOADSERVERDATA(YOUCODE) DEBUGLOG(error) if ([[CustomeClass currentInterentStatus] isEqualToString:@"网络不可用"]) { [CustomeClass showMessage:@"您的网络不可用" ShowTime:1.5]; }else{ [CustomeClass showMessage:@"网络好像有问题，正在重试！" ShowTime:1.5]; YOUCODE}


#pragma mark - 文件部分
#define HOMEPAGEFILE @"homeData"
#define HOMEPAGEDATAKEY @"homeDataKey"

#pragma mark - app 使用的的特殊数据
//测试阶段，写死这两个数据
/*
 ID：zGVpCiAsMnFfAJpg
 Secret：7nfKkKFs5MZUj9ktXUGrLMJQD1XDPu
 
 accessKey
 secretKey
 */
#define ACCESSKEY @"zGVpCiAsMnFfAJpg"
#define SECRETKEY @"27ab30165d6852e32bda183d13f07fcb"

extern const CGFloat ISNavigationHeight;
extern const CGFloat ISTabBarHeight;


#pragma mark - 高德部分
#define GAODEKEY @"c29ab49ddbe6be27182118f65257dd7d"

#pragma mark - navigationbar

//返回按钮
#define NAVIGATIONBACKBARBUTTONITEM UIButton * leftButton = [UIButton buttonWithType:UIButtonTypeCustom];leftButton.frame = CGRectMake(0, 0, 20, 20);[leftButton setImage:[UIImage imageNamed:@"backbutton"] forState:UIControlStateNormal];[leftButton addTarget:self action:@selector(backButtonAction:) forControlEvents:UIControlEventTouchUpInside];self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:leftButton];self.navigationController.interactivePopGestureRecognizer.delegate = (id)self;

//标题
#define NAVIGATIONBARTITLEVIEW(titleString)     UILabel *label = [[UILabel alloc] init];label.text = titleString;label.font = ISFont_17;label.textColor = [UIColor whiteColor];CGSize labelSize = [label.text sizeWithAttributes:[NSDictionary dictionaryWithObjectsAndKeys:[UIFont boldSystemFontOfSize:17], NSFontAttributeName, nil]];label.frame = CGRectMake(0, 0, labelSize.width, labelSize.height);self.navigationItem.titleView = label;

//右侧按钮（文字版）
#define NAVIGATIONBARRIGHTBARBUTTONITEM(BarButtonItemTitle)     UIButton *rightButton = [UIButton buttonWithType:UIButtonTypeCustom];rightButton.frame = CGRectMake(0, 0, 60, 30);[rightButton setTitle:BarButtonItemTitle forState:UIControlStateNormal];rightButton.titleLabel.font = ISFont_15;[rightButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];[rightButton addTarget:self action:@selector(rightBarButtonItemAction:) forControlEvents:UIControlEventTouchUpInside];self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:rightButton];

//右侧按钮（图片版）
#define NAVIGATIONBARRIGHTBARBUTTONITEMWITHIMAGE(IMAGENAME)     UIButton * rightNavItem = [UIButton new];rightNavItem.frame = CGRectMake(0, 0, 20, 20);[rightNavItem setImage:[UIImage imageNamed:IMAGENAME] forState:UIControlStateNormal];[rightNavItem addTarget:self action:@selector(rightBarItemAction) forControlEvents:UIControlEventTouchUpInside];self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:rightNavItem];

#pragma mark - 友盟部分
#define SHAREAPPKEY @"55f9088b67e58e3dbd000488"
