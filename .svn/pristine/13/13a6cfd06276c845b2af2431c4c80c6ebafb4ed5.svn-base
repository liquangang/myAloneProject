//
//  CustomeClass.m
//  M-Cut
//
//  Created by apple on 16/6/13.
//  Copyright © 2016年 Crab movier. All rights reserved.
//

#import "CustomeClass.h"
#import "MovierTranslation.h"
#import <MBProgressHUD.h>

@implementation AddressBookModel
@end

@implementation CustomeClass
//根据传入的格式获取当前时间
/*
 YYYY（年）/MM（月）/dd（日） hh（时）:mm（分）:ss（秒） SS（毫秒）
 需要用哪个的话就把哪个格式加上去。
 值得注意的是，如果想显示两位数的年份的话，可以用”YY/MM/dd hh:mm:ss SS”，两个Y代表两位数的年份。
 而且大写的M和小写的m代表的意思也不一样。“M”代表月份，“m”代码分钟
 “HH”代表24小时制，“hh”代表12小时制
 */
+ (NSString *)getCurrentTimeWithFormatter:(NSString *)timeFormatter{
    NSDateFormatter * formatter = [NSDateFormatter new];
    [formatter setDateFormat:timeFormatter];
    return [formatter stringFromDate:[NSDate date]];
}

+ (void)showMessage:(NSString *)message ShowTime:(NSInteger)showTime
{
    dispatch_async(dispatch_get_main_queue(), ^{
        UIWindow * window = [UIApplication sharedApplication].keyWindow;
        UIView *showview =  [[UIView alloc]init];
        showview.backgroundColor = [UIColor blackColor];
        showview.frame = CGRectMake(1, 1, 1, 1);
        showview.alpha = 1.0f;
        showview.layer.cornerRadius = 5.0f;
        showview.layer.masksToBounds = YES;
        [window addSubview:showview];
        
        UILabel *label = [[UILabel alloc]init];
        CGSize LabelSize = [message sizeWithFont:[UIFont systemFontOfSize:17] constrainedToSize:CGSizeMake(290, 9000)];
        label.frame = CGRectMake(10, 5, LabelSize.width, LabelSize.height);
        label.text = message;
        label.textColor = [UIColor whiteColor];
        label.textAlignment = 1;
        label.backgroundColor = [UIColor clearColor];
        label.font = [UIFont boldSystemFontOfSize:15];
        [showview addSubview:label];
        showview.frame = CGRectMake((SCREEN_WIDTH - LabelSize.width - 20)/2, SCREEN_HEIGHT - 100, LabelSize.width+20, LabelSize.height+10);
        [UIView animateWithDuration:showTime animations:^{
            showview.alpha = 0;
        } completion:^(BOOL finished) {
            [showview removeFromSuperview];
        }];
    });

}

//  十进制转二进制
+ (NSString *)toBinarySystemWithDecimalSystem:(NSString *)decimal
{
    int num = [decimal intValue];
    int remainder = 0;      //余数
    int divisor = 0;        //除数
    
    NSString * prepare = @"";
    
    while (true)
    {
        remainder = num%2;
        divisor = num/2;
        num = divisor;
        prepare = [prepare stringByAppendingFormat:@"%d",remainder];
        
        if (divisor == 0)
        {
            break;
        }
    }
    
    NSString * result = @"";
    for (int i = prepare.length - 1; i >= 0; i --)
    {
        result = [result stringByAppendingFormat:@"%@",
                  [prepare substringWithRange:NSMakeRange(i , 1)]];
    }
    
    return result;
}
//  二进制转十进制
+ (NSString *)toDecimalSystemWithBinarySystem:(NSString *)binary
{
    int ll = 0 ;
    int  temp = 0 ;
    for (int i = 0; i < binary.length; i ++)
    {
        temp = [[binary substringWithRange:NSMakeRange(i, 1)] intValue];
        temp = temp * powf(2, binary.length - i - 1);
        ll += temp;
    }
    
    NSString * result = [NSString stringWithFormat:@"%d",ll];
    
    return result;
}

/** 返回当前网络状态*/
+ (NSString *)currentInterentStatus{
    if ([[MovierTranslation Singleton].netType isEqualToString:@"网络不可用"]) {
        return @"网络不可用";
    }
    if ([[MovierTranslation Singleton].netType isEqualToString:@"移动网络"]) {
        return @"移动网络";
    }
    if ([[MovierTranslation Singleton].netType isEqualToString:@"wifi"]) {
        return @"wifi";
    }
    return nil;
}

+ (void)hudShowWithView:(UIView *)hudSuperView Tag:(NSInteger)hudTag{
    MAINQUEUEUPDATEUI({
        MBProgressHUD * HUD = [[MBProgressHUD alloc] initWithView:hudSuperView];
        [hudSuperView addSubview:HUD];
        HUD.color = [UIColor clearColor];
        HUD.activityIndicatorColor = [UIColor lightGrayColor];
        [HUD show:YES];
        HUD.tag = hudTag;
    })
}

+ (void)hudHiddenWithView:(UIView *)hudSuperView Tag:(NSInteger)hudTag{
    MAINQUEUEUPDATEUI({
        MBProgressHUD * HUD = (MBProgressHUD *)[hudSuperView viewWithTag:hudTag];
        [HUD show:NO];
        [HUD removeFromSuperview];
        HUD = nil;
    })
}

/** 根据颜色返回图片*/
+ (UIImage *)createImageWithColor:(UIColor *)color Rect:(CGRect)myRect
{
    CGRect rect = CGRectMake(0.0f, 0.0f, ISScreen_Width - 16, 34.0f);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return theImage;
}

/** 获取通讯录中的数据*/
+ (void)loadAddressBookDataWithBlock:(RETURNADDRESSBOOKDATA)dataBlock{
    //存放通讯录联系人模型的数组
    NSMutableArray * personArray = [NSMutableArray new];
    __block BOOL readAddressBookPersimmons = NO;
    
    ABAddressBookRef addressBookRef = ABAddressBookCreateWithOptions(NULL, NULL);
    
    if (ABAddressBookGetAuthorizationStatus() == kABAuthorizationStatusNotDetermined) {
        ABAddressBookRequestAccessWithCompletion(addressBookRef, ^(bool granted, CFErrorRef error){
            [personArray addObjectsFromArray:[CustomeClass getArray]];
            readAddressBookPersimmons = YES;
            dataBlock(@{ADDRESSBOOKDATA:personArray, ADDRESSBOOKPERMISSIONS:@(readAddressBookPersimmons)});
        });
    }
    else if (ABAddressBookGetAuthorizationStatus() == kABAuthorizationStatusAuthorized){
        [personArray addObjectsFromArray:[self getArray]];
        readAddressBookPersimmons = YES;
        dataBlock(@{ADDRESSBOOKDATA:personArray, ADDRESSBOOKPERMISSIONS:@(readAddressBookPersimmons)});
    }
    else {
        dispatch_async(dispatch_get_main_queue(), ^{
            // 更新界面
            //提示用户没有获取通讯录权限
            dataBlock(@{ADDRESSBOOKDATA:personArray, ADDRESSBOOKPERMISSIONS:@(readAddressBookPersimmons)});
        });
    }
}

+ (NSArray *)getArray{
    //保存联系人模型的数组
    NSMutableArray * addressBookTemp = [NSMutableArray new];
    
    //新建一个通讯录类
    ABAddressBookRef addressBooks = ABAddressBookCreate();
    
    //获取通讯录中的所有人
    CFArrayRef allPeople = ABAddressBookCopyArrayOfAllPeople(addressBooks);
    //通讯录中人数
    CFIndex nPeople = ABAddressBookGetPersonCount(addressBooks);
    
    //循环，获取每个人的个人信息
    for (NSInteger i = 0; i < nPeople; i++)
    {
        //新建一个addressBook model类
        AddressBookModel *addressBook = [[AddressBookModel alloc] init];
        //获取个人
        ABRecordRef person = CFArrayGetValueAtIndex(allPeople, i);
        //获取个人名字
        CFTypeRef abName = ABRecordCopyValue(person, kABPersonFirstNameProperty);
        CFTypeRef abLastName = ABRecordCopyValue(person, kABPersonLastNameProperty);
        CFStringRef abFullName = ABRecordCopyCompositeName(person);
        NSString *nameString = (__bridge NSString *)abName;
        NSString *lastNameString = (__bridge NSString *)abLastName;
        
        if ((__bridge id)abFullName != nil) {
            nameString = (__bridge NSString *)abFullName;
        } else {
            if ((__bridge id)abLastName != nil)
            {
                nameString = [NSString stringWithFormat:@"%@ %@", nameString, lastNameString];
            }
        }
        addressBook.name = nameString;
        addressBook.recordId = (int)ABRecordGetRecordID(person);;
        
        ABPropertyID multiProperties[] = {
            kABPersonPhoneProperty,
            kABPersonEmailProperty
        };
        NSInteger multiPropertiesTotal = sizeof(multiProperties) / sizeof(ABPropertyID);
        for (NSInteger j = 0; j < multiPropertiesTotal; j++) {
            ABPropertyID property = multiProperties[j];
            ABMultiValueRef valuesRef = ABRecordCopyValue(person, property);
            NSInteger valuesCount = 0;
            if (valuesRef != nil) valuesCount = ABMultiValueGetCount(valuesRef);
            
            if (valuesCount == 0) {
                CFRelease(valuesRef);
                continue;
            }
            //获取电话号码和email
            for (NSInteger k = 0; k < valuesCount; k++) {
                CFTypeRef value = ABMultiValueCopyValueAtIndex(valuesRef, k);
                switch (j) {
                    case 0: {// Phone number
                        addressBook.tel = (__bridge NSString*)value;
                        break;
                    }
                    case 1: {// Email
                        addressBook.email = (__bridge NSString*)value;
                        break;
                    }
                }
                CFRelease(value);
            }
            CFRelease(valuesRef);
        }
        //将个人信息添加到数组中，循环完成后addressBookTemp中包含所有联系人的信息
        [addressBookTemp addObject:addressBook];
        
        if (abName) CFRelease(abName);
        if (abLastName) CFRelease(abLastName);
        if (abFullName) CFRelease(abFullName);
    }
    return [addressBookTemp copy];
}

/** 过滤特殊字符*/
+ (NSString *)filterStringWithStr:(NSString *)str{
    return [[str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:
                                                        @"~!@#$%^&*()_+`{}|:<>?-=[]\\;',./~！@#￥%……&*（）——+·{}|：“《》？-=【】、；‘，。、"]] componentsJoinedByString: @""];
}

//读取plist文件(以字典的方式存储数据)
+ (NSDictionary *)getPlistfileDataWithFileName:(NSString *)fileName{
    return [NSDictionary dictionaryWithContentsOfFile:[[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist", fileName]]];
}

//写入数据到plist（数据用字典存储）
+ (void)writeToPlistWithFileName:(NSString *)fileName Data:(NSDictionary *)dataDic{
    NSLog(@"保存的下载进度 --- %@", [self getPlistfileDataWithFileName:fileName]);
    [dataDic writeToFile:[[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES) objectAtIndex:0] stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.plist", fileName]] atomically:YES];
    NSLog(@"存储之后读取一次 --- %@", [self getPlistfileDataWithFileName:fileName]);
}

//强制旋转屏幕
+ (void)orientationToPortrait:(UIInterfaceOrientation)orientation{
    SEL selector = NSSelectorFromString(@"setOrientation:");
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];
    [invocation setSelector:selector];
    [invocation setTarget:[UIDevice currentDevice]];
    int val = orientation;
    [invocation setArgument:&val atIndex:2];//前两个参数已被target和selector占用
    [invocation invoke];
}

/** 获得当前系统版本*/
+ (float)getIOSVersion
{
    return [[[UIDevice currentDevice] systemVersion] floatValue];
}

+ (void)deleteFileWithFileName:(NSString *)fileName{
    NSError * error;
    if ([[NSFileManager defaultManager] fileExistsAtPath:fileName]) {
        [[NSFileManager defaultManager] removeItemAtPath:fileName error:&error];
    }
    
    if (error) {
        DEBUGLOG(error)
    }else{
        DEBUGSUCCESSLOG(@"删除文件夹成功")
    }
}

/** 获得当前app版本号*/
+ (NSString *)getAppVersion{
    return [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
}

@end
