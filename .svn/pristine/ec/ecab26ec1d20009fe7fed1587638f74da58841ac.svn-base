


//
//  TakeVideoViewController.m
//  M-Cut
//
//  Created by liquangang on 16/9/28.
//  Copyright © 2016年 Crab movier. All rights reserved.
//

#import "TakeVideoViewController.h"
#import <AVFoundation/AVFoundation.h>
#import "CameraView.h"
#import "XMNPhotoManager.h"
#import <CoreLocation/CoreLocation.h>
#import <MapKit/MapKit.h>
#import "CustomeClass.h"
#import "SoapOperation.h"
#import <SceneKit/SceneKit.h>
#import "App_vpVDCOrderForCreate.h"
#import "MC_OrderAndMaterialCtrl.h"
#import "UserEntity.h"
#import <CoreLocation/CoreLocation.h>

@interface TakeVideoViewController ()<AVCaptureFileOutputRecordingDelegate,
                                      CLLocationManagerDelegate>

//视频view
@property (nonatomic, strong) UIView * userCamera;

//负责输入和输出设置之间的数据传递                  
@property (strong, nonatomic) AVCaptureSession *captureSession;

//负责从AVCaptureDevice获得视频输入数据
@property (strong, nonatomic) AVCaptureDeviceInput *captureDeviceInput;

//获得声音输入数据
@property (nonatomic, strong) AVCaptureDeviceInput * audioCaptureDeviceInput;

//视频输出流
@property (strong, nonatomic) AVCaptureMovieFileOutput *captureMovieFileOutput;

//相机拍摄预览图层
@property (strong, nonatomic) AVCaptureVideoPreviewLayer *captureVideoPreviewLayer;

//相机控制部分view
@property (nonatomic, strong) CameraView * cameraControllView;

//ar内容
@property (nonatomic, strong) UIButton * arButton;

//时长显示label
@property (nonatomic, strong) UILabel * timeLabel;

//时长
@property (nonatomic, assign) NSInteger timeLength;

//计时器
@property (nonatomic, strong) NSTimer * videoTimeer;

//定位控制对象
@property (nonatomic, strong) CLLocationManager * locationManager;

//3dveiw
@property (nonatomic, strong) SCNView * scnView;

//视频市场str
@property (nonatomic, assign) float videoLength;

//服务器返回的ar信息数组
@property (nonatomic, strong) NSMutableArray * arMuArray;

//室内定位对象
//@property (nonatomic, strong) Online
@end

@implementation TakeVideoViewController

- (void)dealloc{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    DEBUGSUCCESSLOG(@"dealloc")
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.captureSession startRunning];
}

-(void)viewDidDisappear:(BOOL)animated{
    [super viewDidDisappear:animated];
    [self.captureSession stopRunning];
}

#pragma mark -AVCaptureFileOutputRecordingDelegate

/**
 *  录制完成
 */
- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
        didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
        fromConnections:(NSArray *)connections
        error:(NSError *)error
{
    
}

#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager
     didUpdateLocations:(NSArray<CLLocation *> *)locations{
    CLLocation * location = [locations lastObject];
    CLLocationCoordinate2D locationCoorinate = location.coordinate;
//    [self isThereWithLocationCoorinate:locationCoorinate];
    [self showARPropertyWithLocationCoorinate:locationCoorinate];
}

#pragma mark - 功能模块

/**
 *  开始请求地理信息
 */
- (void)startGetLocation{
    
    //判断定位功能是否可用
    if ([CLLocationManager locationServicesEnabled] &&
        ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorized ||
         [CLLocationManager authorizationStatus] == kCLAuthorizationStatusNotDetermined)) {
            [self.locationManager startUpdatingLocation];
        }else{
            [CustomeClass showMessage:@"定位功能不可用" ShowTime:3];
        }
}

/**
 *  是否在规定范围内
 */
- (void)isThereWithLocationCoorinate:(CLLocationCoordinate2D)locationCoorinate{
    WEAKSELF2
    
    //116.332289，39.978503
    [[SoapOperation Singleton] WS_CheckGMLBS:@(116.332289)
                                         Pos:@(39.978503)
                                      Radius:@(100)
                                     Success:^(NSNumber *num) {
                                         
                                         //在当前区域中
                                         [weakSelf showARPropertyWithLocationCoorinate:locationCoorinate];
                                         MAINQUEUEUPDATEUI({
                                             [weakSelf arButtonShowArWithArInfo:nil];
                                         })
                                     } Fail:^(NSError *error) {
                                         DEBUGLOG(error);
                                         [CustomeClass showMessage:[NSString stringWithFormat:@"%ld", error.code]
                                                          ShowTime:3];
                                     }];
}

/**
 *  显示相关的ar元素
 */
- (void)showARPropertyWithLocationCoorinate:(CLLocationCoordinate2D)locationCoorinate{
    
    //test 此时使用的是测试经纬度
    WEAKSELF2
    
    //116.332289，39.978503
    [[SoapOperation Singleton] getARWithLongtitude:116.332289
                                          Latitude:39.978503
                                            Radius:100
                                            Amount:1
                                           Success:^(NSMutableArray *serverDataArray) {
                                               NSLog(@"serverDataArray[0] --- %@", serverDataArray[0]);
                                               
                                               //展示相关ar元素
                                               [weakSelf.arMuArray addObjectsFromArray:serverDataArray];
                                               [weakSelf arButtonShowArWithArInfo:serverDataArray];
                                           } Fail:^(NSError *error) {
                                               DEBUGLOG(error)
                                               if (error.code == 51) {
                                                   [CustomeClass showMessage:@"在某个好地方有红包等你"
                                                                    ShowTime:3];
                                               }
                                           }];
}

/**
 *  设置arbutton展示ar元素
 */
- (void)arButtonShowArWithArInfo:(NSMutableArray *)arInfoArray{
    
    //test
    self.arButton.frame = CGRectMake(arc4random() % (int)(ISScreen_Width / 2),
                                     arc4random() % (int)((ISScreen_Height - 70) / 2),
                                     ISScreen_Width / 2,
                                     (ISScreen_Height - 70) / 2);
    [self.arButton setImage:[UIImage imageNamed:@"inshow-选中"]
                   forState:UIControlStateNormal];
    self.arButton.hidden = NO;
}

/**
 *  捕获区域改变
 *
 *  @param notification 通知对象
 */
-(void)areaChange:(NSNotification *)notification{
    
}

/**
 *  取得指定位置的摄像头
 *
 *  @param position 摄像头位置
 *
 *  @return 摄像头设备
 */
-(AVCaptureDevice *)getCameraDeviceWithPosition:(AVCaptureDevicePosition )position{
    NSArray *cameras= [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo];
    for (AVCaptureDevice *camera in cameras) {
        if ([camera position] == position) {
            return camera;
        }
    }
    return nil;
}

/**
 *  拍照按钮方法
 */
- (void)takeVideo{
    
    //判断是否在录制,如果在录制，就停止，并设置按钮title
    if ([self.captureMovieFileOutput isRecording]) {
        self.arButton.hidden = YES;
        [self.captureMovieFileOutput stopRecording];
        
        //暂停
        [self.videoTimeer setFireDate:[NSDate distantFuture]];
        
        //暂停定位功能
        [self.locationManager stopUpdatingLocation];
        return;
    }
    
    //开始
    self.timeLength = 0;
    [self.videoTimeer setFireDate:[NSDate distantPast]];
    
    //开始启动定位展示ar内容
    [self startGetLocation];
    
    //显示arbutton
    [self arButtonShowArWithArInfo:nil];
    
    //开始录制视频
    NSString *path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,
                                                          NSUserDomainMask,
                                                          YES).lastObject
                      stringByAppendingPathComponent:@"materialVidio.mov"];
    
    //转为视频保存的url
    NSURL *url = [NSURL fileURLWithPath:path];
    
    //开始录制,并设置控制器为录制的代理
    [self.captureMovieFileOutput startRecordingToOutputFileURL:url
                                             recordingDelegate:self];
}

/**
 *  使用视频按钮方法
 */
- (void)useVideo{
    [self saveVideoToSandBox];
}

/**
 *  保存视频到沙盒
 */
- (void)saveVideoToSandBox{
    WEAKSELF2
    
    //保存沙盒中的视频到相册
    [[XMNPhotoManager sharedManager] saveVideoWithLocalUrl:[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,
                                                                                                NSUserDomainMask,
                                                                                                YES).lastObject stringByAppendingPathComponent:@"materialVidio.mov"]
                                                  Complete:^(NSString *assetUrl) {
                                                      [weakSelf addMaterialWithAssetUrl:assetUrl];
                                                  }];
}

/**
 *  将视频添加为素材
 */
- (void)addMaterialWithAssetUrl:(NSString *)assetUrl{
    WEAKSELF2
    [[ALAssetsLibrary new] assetForURL:[NSURL URLWithString:assetUrl]
                           resultBlock:^(ALAsset *asset) {
                               
                               //根据asset设置xmnmodel内容
                               if (asset) {
                                   XMNAssetModel * assetModel = [XMNAssetModel modelWithAsset:asset
                                                                                         type:XMNAssetTypeVideo];
                                   [weakSelf addMaterialWithAssetModel:assetModel];
                               }
                           }
                          failureBlock:^(NSError *error) {
                              DEBUGLOG(error)
                          }];
}

/**
 *  根据xmnassmodel将相册中的对象添加到本地数据库中
 */
- (void)addMaterialWithAssetModel:(XMNAssetModel *)assetModel{
    NewOrderVideoMaterial * material = [NewOrderVideoMaterial new];
    material.createTime = [CustomeClass getCurrentTimeWithFormatter:@"YYYY/MM/dd-hh:mm:ss"];
    
    //目前数据库中没有持久化material.order_id，所以暂不设置
    material.material_type = 2;
    material.material_playduration = self.videoLength;
    
    //目前数据库中所有的material.nIndex对应的字段都是0，默认没有设置
    NSString * fileName = assetModel.filename;
    NSString * kCachesPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,
                                                                  NSUserDomainMask,
                                                                  YES) objectAtIndex:0];
    NSString * videoPath = [[NSString alloc] initWithFormat:@"%@/%@", kCachesPath, fileName];
    material.material_localURL = videoPath;
    material.material_ossURL = @"";
    UIImage * image = [UIImage imageWithCGImage:(__bridge CGImageRef _Nonnull)(assetModel.thumbnail)];
    material.material_stream = image;
    material.material_assetsURL = [assetModel.fileAssUrl absoluteString];
    NewNSOrderDetail * orderDetail = [MC_OrderAndMaterialCtrl GetFreshOrder:[[UserEntity sharedSingleton].customerId intValue]];
    
    //该素材没有持久化
    if (![MC_OrderAndMaterialCtrl FindMaterial:[[UserEntity sharedSingleton].customerId intValue]
                                      Orderid:orderDetail.order_id
                                          URL:material.material_assetsURL
                                      URLType:USELOCALPATH]) {
        
        //该素材时间加入后小于180s
        int allMaterialTimeLength = 0;
        NSMutableArray *array = [MC_OrderAndMaterialCtrl GetMaterial:[[UserEntity sharedSingleton].customerId intValue]
                                                             Orderid:orderDetail.order_id];
        for (NewOrderVideoMaterial* item in array) {
            allMaterialTimeLength+=item.material_playduration;
        }
        
        // 如果图片数量少于5张, 提示用户素材数量较少
        if (allMaterialTimeLength + self.timeLength > 180) {
            [CustomeClass showMessage:@"素材时长超过180s，不能添加该视频" ShowTime:3];
        }else{
            
            //添加该素材
            [MC_OrderAndMaterialCtrl MC_AddMaterial:[[UserEntity sharedSingleton].customerId intValue]
                                           Material:material
                                            Orderid:orderDetail.order_id];
            [MC_OrderAndMaterialCtrl UpdateFresh:orderDetail];
            
            //添加缩略图到沙盒
            NSString * imageNameStr = [[material.material_assetsURL componentsSeparatedByString:@"="][1]
                                                                    componentsSeparatedByString:@"&"][0];
            [CustomeClass saveImageDocuments:assetModel.thumbnail
                                   ImageName:imageNameStr];
        }
    }
    [self popLastVc];
}

/**
 *  计时器方法
 */
- (void)function:(NSTimer *)videoTimer{
    self.timeLength++;
    self.timeLabel.text = [NSString stringWithFormat:@"%ld:%ld",
                           self.timeLength / 60,
                           self.timeLength % 60];
    self.videoLength = self.timeLength;
}

/**
 *  释放定时器
 */
- (void)deallocTimer{
    [self.videoTimeer invalidate];
    self.videoTimeer = nil;
}

/**
 *  dealloc地理位置控制对象
 */
- (void)deallocLocationManager{
    [self.locationManager stopUpdatingLocation];
    self.locationManager.delegate = nil;
    self.locationManager = nil;
}

/**
 *  返回上个页面（必须使用这个方法返回上个界面，否则控制器无法dealloc）
 */
- (void)popLastVc{
    [self deallocLocationManager];
    [self deallocTimer];
    [self dismissViewControllerAnimated:YES completion:nil];
}

/**
 *  显示3d图像
 */
- (void)showScnView{
    self.scnView.hidden = NO;
}

/**
 *  隐藏3d图像
 */
- (void)hiddenScnView{
    self.scnView.hidden = YES;
}

/**
 *  获得音频输入设备
 */
- (AVCaptureDevice *)getVoiceInputDevice{
    
    //添加一个音频输入设备
    AVCaptureDevice *audioCaptureDevice = [[AVCaptureDevice devicesWithMediaType:AVMediaTypeAudio] firstObject];
    return audioCaptureDevice;
}

/**
 *  获得视频输入设备
 */
- (BOOL)getVideoInputDevice{
    AVCaptureDevice * captureDevice = [self getCameraDeviceWithPosition:AVCaptureDevicePositionBack];
    if (!captureDevice) {
        NSLog(@"取后置摄像头出现问题");
        return NO;
    }
    return YES;
}

#pragma mark - 懒加载

/**
 *  定位控制对象
 */
- (CLLocationManager *)locationManager{
    if (!_locationManager) {
        _locationManager = [CLLocationManager new];
        _locationManager.delegate = self;
        _locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters;
        [_locationManager requestAlwaysAuthorization];
    }
    return _locationManager;
}

/**
 *  相机控制view
 */
- (CameraView *)cameraControllView{
    if (!_cameraControllView) {
        _cameraControllView = [[CameraView alloc] initWithFrame:CGRectMake(0,
                                                                           ISScreen_Height - 70,
                                                                           ISScreen_Width,
                                                                           70)];
        WEAKSELF2
        
        //取消按钮执行的代码
        [_cameraControllView setCancleBlock:^{
            [weakSelf popLastVc];
        }];
        
        //拍摄按钮执行的方法
        [_cameraControllView setTakeVideoBlock:^(UILabel * takePropmtLabel,
                                                 UIButton * takeVideoButton){
            //如果点击开始录制的话就开始保存，点击暂停的化就暂停保存
            [weakSelf takeVideo];
            weakSelf.timeLabel = takePropmtLabel;
        }];
        
        //使用视频方法
        [_cameraControllView setUseVideoBlock:^(){
            [weakSelf useVideo];
        }];
    }
    return _cameraControllView;
}

/**
 *  相机画面
 */
- (UIView *)userCamera{
    if (!_userCamera) {
        _userCamera=[[UIView alloc]initWithFrame:CGRectMake(0,
                                                            0,
                                                            ISScreen_Width,
                                                            ISScreen_Height - 70)];
        _userCamera.layer.masksToBounds = YES;
        [self.view addSubview:_userCamera];
        [self.view addSubview:self.cameraControllView];
    }
    return _userCamera;
}

/**
 *  ar按钮
 */
- (UIButton *)arButton{
    if (!_arButton) {
        _arButton = [UIButton new];
        _arButton.layer.frame = CGRectMake(arc4random() % (int)(ISScreen_Width / 2),
                                           arc4random() % (int)((ISScreen_Height - 70) / 2),
                                           ISScreen_Width / 2,
                                           (ISScreen_Height - 70) / 2);
        _arButton.backgroundColor = [UIColor clearColor];
    }
    return _arButton;
}

/**
 *  计时器
 */
- (NSTimer *)videoTimeer{
    if (!_videoTimeer) {
        _videoTimeer = [NSTimer scheduledTimerWithTimeInterval:1.0
                                                        target:self
                                                      selector:@selector(function:)
                                                      userInfo:nil
                                                       repeats:YES];
    }
    return _videoTimeer;
}

/**
 *  懒加载视频预览层，用于实时展示摄像头状态
 */
- (AVCaptureVideoPreviewLayer *)captureVideoPreviewLayer{
    if (!_captureVideoPreviewLayer) {
        _captureVideoPreviewLayer = [[AVCaptureVideoPreviewLayer alloc]
                                     initWithSession:self.captureSession];
        _captureVideoPreviewLayer.frame = self.userCamera.layer.bounds;
        _captureVideoPreviewLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;
        [_captureVideoPreviewLayer addSublayer:self.arButton.layer];
    }
    return _captureVideoPreviewLayer;
}

/**
 *  初始化回话（用于输入和输出之间的设置传递）
 */
- (AVCaptureSession *)captureSession{
    if (!_captureSession) {
        _captureSession = [AVCaptureSession new];
        if ([_captureSession canSetSessionPreset:AVCaptureSessionPreset1280x720]) {
            [_captureSession setSessionPreset:AVCaptureSessionPreset1280x720];
        }
        if ([_captureSession canAddInput:self.captureDeviceInput]) {
            [_captureSession addInput:self.captureDeviceInput];
            [_captureSession addInput:self.audioCaptureDeviceInput];
            AVCaptureConnection * captureConnection = [self.captureMovieFileOutput connectionWithMediaType:AVMediaTypeVideo];
            if ([captureConnection isVideoStabilizationSupported]) {
                captureConnection.preferredVideoStabilizationMode = AVCaptureVideoStabilizationModeAuto;
            }
        }
        if ([_captureSession canAddOutput:self.captureMovieFileOutput]) {
            [_captureSession addOutput:self.captureMovieFileOutput];
        }
        [self.userCamera.layer addSublayer:self.captureVideoPreviewLayer];
    }
    return _captureSession;
}

/**
 *  初始化获得视频输入数据对象
 */
- (AVCaptureDeviceInput *)captureDeviceInput{
    if (!_captureDeviceInput) {
        NSError *error=nil;
        
        //根据输入设备初始化设备输入对象，用于获得输入数据
        _captureDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:[self getCameraDeviceWithPosition:AVCaptureDevicePositionBack]
                                                                     error:&error];
        if (error) {
            NSLog(@"取得设备输入对象时出错，错误原因：%@",error.localizedDescription);
            return nil;
        }
    }
    return _captureDeviceInput;
}

/**
 *  初始化获得音频输入对象
 */
- (AVCaptureDeviceInput *)audioCaptureDeviceInput{
    if (!_audioCaptureDeviceInput) {
        NSError * error = nil;
        _audioCaptureDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:[self getVoiceInputDevice]
                                                                          error:&error];
        if (error) {
            NSLog(@"取得设备输入对象时出错，错误原因：%@",error.localizedDescription);
            return nil;
        }
    }
    return _audioCaptureDeviceInput;
}

/**
 *  初始化数据输出对象
 */
- (AVCaptureMovieFileOutput *)captureMovieFileOutput{
    if (!_captureMovieFileOutput) {
        _captureMovieFileOutput = [AVCaptureMovieFileOutput new];
    }
    return _captureMovieFileOutput;
}

/**
 *  初始化ar信息数组
 */
- (NSMutableArray *)arMuArray{
    if (!_arMuArray) {
        _arMuArray = [NSMutableArray new];
    }
    return _arMuArray;
}

/**
 *  初始化SCNView（3D内容，暂时不做，忽略）
 */
- (SCNView *)scnView{
    if (!_scnView) {
        // create a new scene
        SCNScene *scene = [SCNScene sceneNamed:@"art.scnassets/ship.scn"];
        
        // create and add a camera to the scene
        SCNNode *cameraNode = [SCNNode node];
        cameraNode.camera = [SCNCamera camera];
        [scene.rootNode addChildNode:cameraNode];
        
        // place the camera
        cameraNode.position = SCNVector3Make(0, 0, 15);
        
        // create and add a light to the scene
        SCNNode *lightNode = [SCNNode node];
        lightNode.light = [SCNLight light];
        lightNode.light.type = SCNLightTypeOmni;
        lightNode.position = SCNVector3Make(0, 10, 10);
        [scene.rootNode addChildNode:lightNode];
        
        // create and add an ambient light to the scene
        SCNNode *ambientLightNode = [SCNNode node];
        ambientLightNode.light = [SCNLight light];
        ambientLightNode.light.type = SCNLightTypeAmbient;
        ambientLightNode.light.color = [UIColor darkGrayColor];
        [scene.rootNode addChildNode:ambientLightNode];
        
        // retrieve the ship node
        SCNNode *ship = [scene.rootNode childNodeWithName:@"ship" recursively:YES];
        
        // animate the 3d object
        [ship runAction:[SCNAction repeatActionForever:[SCNAction rotateByX:2 y:2 z:2 duration:1]]];
        
        // retrieve the SCNView
        UIView * scnSuperView = [[UIView alloc] initWithFrame:self.arButton.bounds];
        [self.arButton addSubview:scnSuperView];
        SCNView *scnView = (SCNView *)scnSuperView;
        
        // set the scene to the view
//        scnView.scene = scene;
        [scnView setScene:scene];
        
        // allows the user to manipulate the camera
        scnView.allowsCameraControl = YES;
        
        // show statistics such as fps and timing information
        scnView.showsStatistics = YES;
        
        // configure the view
        scnView.backgroundColor = [UIColor clearColor];
        
        _scnView = scnView;
    }
    return _scnView;
}
@end
