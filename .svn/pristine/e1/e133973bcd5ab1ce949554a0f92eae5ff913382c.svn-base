//
//  DetailsViewController.m
//  samples_ios
//
//  Created by baocai zhang on 12-10-29.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "DetailsViewController.h"
#import "MBProgressHUD.h"
#import "CloudMaterialTableViewCell.h"
#import "APPUserPrefs.h"

@interface DetailsViewController ()<UIActionSheetDelegate,UIImagePickerControllerDelegate,MBProgressHUDDelegate>
@end

@implementation DetailsViewController
@synthesize tableView = _tableView;
@synthesize bucketName = _bucketName;
@synthesize objects = _objects;
@synthesize prefix = _prefix;
@synthesize folders = _folders;
@synthesize objectsst = _objectsst;
@synthesize foldersst = _foldersst;
-(void) dealloc
{
    self.tableView = nil;
    self.bucketName = nil;
    self.objects = nil;
    self.prefix = nil;
    self.folders = nil;
    self.objectsst = nil;
    self.foldersst = nil;
    [super dealloc];
}

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    _objects = [[NSMutableArray alloc] init];
    _folders = [[NSMutableArray alloc] init];
    _objectsst = [[NSMutableArray alloc] init];
    _foldersst = [[NSMutableArray alloc] init];
    self.navigationItem.title = @"Objects";
    UIBarButtonItem * addItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd  target:self action:@selector(addOSSObject:)];
    [self.navigationItem setRightBarButtonItem:addItem];
}

-(void) addOSSObject:(id) sender
{
    UIActionSheet *actionSheet = [[UIActionSheet alloc]
                                  initWithTitle:@"创建Object类型"
                                  delegate:self
                                  cancelButtonTitle:@"取消"
                                  destructiveButtonTitle:nil
                                  otherButtonTitles:@"文件夹", @"拍照",@"图库",nil];
    actionSheet.actionSheetStyle = UIActionSheetStyleBlackOpaque;
    [actionSheet showInView:self.view];
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    switch (buttonIndex) {
        case 0:
        {
            [self addFolder];
        }
            break;
        case 1:
        {
            [self addPictureFromCamera];
        }
        case 2:
        {
            [self addPictureFromPhotoLibrary];
        }
            break;
        default:
            break;
    }
}

-(void) addFolder
{
    UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:@"输入文件夹名称" message:@"" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"OK",nil];
    alert.alertViewStyle = UIAlertViewStylePlainTextInput;
    [alert show];
    [alert release];
}

#pragma mark UIAlertViewDelegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 1) {
        UITextField * textField = [alertView textFieldAtIndex:0];
        if (textField.text != nil && ![textField.text isEqualToString:@""]) {
            NSString *strKey = [NSString stringWithFormat:@"%@%@/",self.prefix,textField.text];
            NSLog(@"%@",strKey);
        }
    }
}

-(void) addPictureFromCamera
{
    UIImagePickerControllerSourceType sourceType = UIImagePickerControllerSourceTypeCamera;
    if ([UIImagePickerController isSourceTypeAvailable: UIImagePickerControllerSourceTypeCamera])
    {
        UIImagePickerController *picker = [[UIImagePickerController alloc] init];
        picker.delegate = self;
        picker.allowsEditing = NO;
        picker.sourceType = sourceType;
        [self presentModalViewController:picker animated:YES];
        [picker release];
    }
    else
    {
        NSLog(@"模拟其中无法打开照相机,请在真机中使用");
    }
}

-(void)addPictureFromPhotoLibrary
{
    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
    picker.delegate = self;
    picker.allowsEditing = NO;
    [self presentModalViewController:picker animated:YES];
    [picker release];
}

-(void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    NSString *type = [info objectForKey:UIImagePickerControllerMediaType];
    NSString *imageId;
    NSString *imageType;
    [picker dismissModalViewControllerAnimated:YES];
    if ([type isEqualToString:@"public.image"])
    {
        UIImage* image = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
        image = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
        image = [image fixOrientation];
        NSURL *url = [info objectForKey: @"UIImagePickerControllerReferenceURL"];
        imageId = [url absoluteString];
        NSArray *tmpArray = [imageId componentsSeparatedByString: @"="];
        imageId = [tmpArray objectAtIndex:1];
        imageType = [tmpArray objectAtIndex:2];
        NSArray *tmpArray2 = [imageId componentsSeparatedByString: @"&"];
        imageId = [tmpArray2 objectAtIndex:0];
        NSString *fileName;
        NSDate * date = [NSDate date];
        NSData *data;
        if (UIImagePNGRepresentation(image) == nil)
        {
            data = UIImageJPEGRepresentation(image, 1.0);
        }else{
            data = UIImagePNGRepresentation(image);
            imageType = @"png";
        }
        if (imageId == nil || [imageId isEqualToString:@""]) {
            NSString *strTime =[NSString stringWithFormat:@"%ld",(long)date.timeIntervalSinceReferenceDate];
            fileName = [[NSString alloc] initWithFormat: @"photo%@.%@", strTime, imageType];
        }else{
            fileName = [[NSString alloc] initWithFormat: @"%@.%@", imageId, imageType];
        }
        MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.navigationController.view animated:YES];
        hud.labelText = @"图片上传中...";
        dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
            [self putObject:fileName data:data];
        });
    }
}

- (void)hudWasHidden:(MBProgressHUD *)hud {
    [hud removeFromSuperview];
}


- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath{
    return UITableViewCellEditingStyleDelete;
}

- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath{
    return nil;
}

- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}

- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        _indexPath = [indexPath retain];
        NSString *strKey = @"";
        if (indexPath.row < [self.folders count]) {
            strKey = [self.folders objectAtIndex:indexPath.row];
        }
    }else if (editingStyle == UITableViewCellEditingStyleInsert) {
    }
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    int rtn =0;
    rtn = [self.folders count] +[self.objects count];
    return rtn;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[CloudMaterialTableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease];
    }
    NSString *strIndex;
    if (indexPath.row < [self.folders count]) {
        NSString *strFolder = [self.folders objectAtIndex:indexPath.row];
        NSArray *sSplit = [strFolder componentsSeparatedByString:@"/"];
        strIndex =[NSString stringWithFormat:@"%@",[sSplit objectAtIndex:[sSplit count]-2] ];
        cell.imageView.image = [UIImage imageNamed:@"folder_show"];
    }
    cell.textLabel.text = strIndex;
    cell.textLabel.lineBreakMode = NSLineBreakByTruncatingMiddle;
    return cell;
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (indexPath.row < [self.folders count]) {
        NSString * str = [self.folders objectAtIndex:indexPath.row];
        DetailsViewController * detailsVC = [[DetailsViewController alloc] initWithNibName:@"DetailsViewController" bundle:nil];
        detailsVC.bucketName = self.bucketName;
        detailsVC.prefix = str;
        [self.navigationController pushViewController:detailsVC animated:YES];
        [detailsVC release];
    }
}
- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath
{
    
}
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

@end
