//
//  MWICloudViewController.m
//  ICloudSpace
//
//  Created by 李亚飞 on 15/9/24.
//  云空间模块主界面
//

#import "MWICloudViewController.h"
// tableView 的顶部视图
#import "MWICloudHeaderView.h"
// tableView 底部的扩容视图
#import "MWICloudExpanView.h"
// 文件底部操作视图
#import "MWICloudFooterView.h"
// 文件数据模型
#import "MWICloudModel.h"
// 普通状态下的 cell
#import "ICloudCell.h"
// 编辑状态下的 cell
#import "MWICloudEditCell.h"
// 搜索状态下的 cell
#import "MWICloudMoveCell.h"

// 移动界面
#import "MWMoveViewController.h"
// 下载列表
#import "MWICloudListViewController.h"
// 点击排序按钮的 下拉菜单
#import "MWDropdownMenu.h"
#import "MWDropdownViewController.h"
// 点击上传按钮的 选择视图
#import "MWUploadChooseView.h"

// 相册选择控制器
#import "MWAlbumViewController.h"
// 系统相册
#import <AssetsLibrary/AssetsLibrary.h>
// 搜索框
#import "MWICloudSearchBar.h"
#import "MWCoverView.h"
// 扩容控制器
#import "MWICloudExpanViewController.h"

// 测试
//#import "UzysAssetsPickerController.h"

@interface MWICloudViewController () <MWICloudHeaderViewDelegate, UITableViewDataSource, UITableViewDelegate, MWICloudExpanViewDelegate,  MWICloudFooterViewDelegate, ICloudCellDelegate, MWICloudEditCellDelegate, UIAlertViewDelegate, UIActionSheetDelegate, MWMoveViewControllerDelegate, MWDropdownViewControllerDelegate, MWUploadChooseViewDelegate, MWCoverViewDelegate>
/**  顶部视图 */
@property (weak, nonatomic) MWICloudHeaderView *headerView;
/**  中间tableView视图 */
@property (weak, nonatomic) UITableView *tableView;

/**  扩容视图 */
@property (weak, nonatomic) MWICloudExpanView *expanView;
/**  文件夹底部操作视图 */
@property (weak, nonatomic) MWICloudFooterView *footerView;

/**  tableView数据源 -- 测试 */
@property (strong, nonatomic) NSMutableArray *files;
/**  搜索到的文件数据 */
@property (strong, nonatomic) NSMutableArray *searchFiles;


/**  当前点击的 cell */
@property (strong, nonatomic) ICloudCell *cell;
/**  当前点击的 cell 的indexPath, 用来标记当前点击的哪一行 */
@property (strong, nonatomic) NSIndexPath *indexPath;
/**  当前点击的 cell 的高度 */
@property (assign, nonatomic) CGFloat height;
/**  当前点击的 cell 是否显示扩展高度, 因为只需要点击的那一行改变高度 */
@property (assign, nonatomic) BOOL isExpan;
/**  上一次点击的 cell */
@property (strong, nonatomic) ICloudCell *preCell;


/**  导航条右侧的按钮 */
@property (weak, nonatomic) UIButton *rightBarButton;
/**  导航条左侧的按钮 */
@property (weak, nonatomic) UIButton *leftBarButton;
/**  进入下级界面后的  导航条左侧的按钮 */
@property (weak, nonatomic) UIButton *leftButton;

/**  选中的文件夹(保存数据模型) */
@property (strong, nonatomic) NSMutableArray *chooseFiles;
/**  排序按钮点击的下拉视图 */
@property (weak, nonatomic) MWDropdownMenu *dropdownMenu;
/**  上传按钮点击的选择视图 */
//@property (weak, nonatomic) MWUploadChooseView *uploadView;
/**  全屏的遮罩 */
@property (weak, nonatomic) MWCoverView *coverView;
/**  搜索框 */
@property (weak, nonatomic) MWICloudSearchBar *searchBar;

/**  记录 searchBar 的状态 (是否正在编辑) */
@property (assign, nonatomic) BOOL isSearchBarEditing;

/**  底部视图 删除按钮 点击弹框 */
@property (weak, nonatomic) UIActionSheet *deleteSheet;
/**  cell内部 更多操作按钮 点击弹框 */
@property (weak, nonatomic) UIActionSheet *moreSheet;
/**  新建文件夹的 alertView */
@property (weak, nonatomic) UIAlertView *addFolerView;
/**  重命名文件的 alertView */
@property (weak, nonatomic) UIAlertView *renameView;

@end

@implementation MWICloudViewController

/**  测试数据(初始数据) */
- (NSMutableArray *)files {
    if (!_files) {
        // 读取plist文件
        NSString *path = [[NSBundle mainBundle] pathForResource:@"files.plist" ofType:nil];
        NSArray *array = [NSArray arrayWithContentsOfFile:path];
        
        NSMutableArray *f = [NSMutableArray array];
        for (NSDictionary *dict in array) {
            MWICloudModel *model = [MWICloudModel modelWithDict:dict];
            [f addObject:model];
        }
        _files = f;
    }
    return _files;
}

/**  存放选择的文件 */
- (NSMutableArray *)chooseFiles {
    if (!_chooseFiles) {
        self.chooseFiles = [NSMutableArray array];
    }
    return _chooseFiles;
}

/**  搜索到的文件数据 */
- (NSMutableArray *)searchFiles {
    if (!_searchFiles) {
        self.searchFiles = [NSMutableArray array];
    }
    return _searchFiles;
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    // 添加头部视图(5个按钮)
    [self setupHeaderView];
    
    // 添加底部视图
    [self setupExpanView];
    
    // 从下级界面返回时需要设置当前界面的显示状态
    if (self.rightBarButton.selected == YES) {
        self.expanView.hidden = YES;
        self.tabBarController.tabBar.hidden = YES;
        self.leftBarButton.hidden = NO;
        
        // 从下个界面返回后, 需要将选择数组中的数据清空
        [self.chooseFiles removeAllObjects];
        [self.footerView setTitleWithFilesCount:0];
    } else {    // 刚开始时显示 "多选" 按钮, 因此左侧的按钮需要隐藏
        self.expanView.hidden = NO;
        self.tabBarController.tabBar.hidden = NO;
        self.leftBarButton.hidden = YES;
    }
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = MWICloudColor(199, 199, 199);
    
    // 设置导航条
    [self setupNavigation];
    
    // 云空间文件及文件夹默认为“按文件类型排序”
    [self sortByType];
    
    // 添加中间视图tableView
    [self setupTableView];
}

/**
 *  设置导航条 样式 --- 普通状态
 */
- (void)setupNavigation {
    // 设置navigation的背景图片
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageNamed:@"navigation_bg"] forBarMetrics:UIBarMetricsDefault];
    
    // 设置navigation的 titleView
    [self setupTitleView:@"云空间"];
    
    // 导航栏右侧按钮
    UIButton *rightBarButton = [UIButton buttonWithTarget:self action:@selector(rightBarButtonClick:) title:@"多选" selectTitle:@"取消" color:MWICloudColor(255, 255, 255) font:15];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:rightBarButton];
    self.rightBarButton = rightBarButton;
}

/**
 *  设置导航条 样式 --- 顶部视图  搜索按钮  点击
 */
- (void)setupNavigationWhenSearch {
    // 设置navigation的背景图片
//    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageNamed:@"navigation_bg"] forBarMetrics:UIBarMetricsDefault];
    
    // 导航栏右侧按钮
    UIButton *rightBarButton = [UIButton buttonWithTarget:self action:@selector(rightBarButtonClickWhenSearch) title:@"取消" selectTitle:nil color:MWICloudColor(255, 255, 255) font:15];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:rightBarButton];
    self.rightBarButton = rightBarButton;
    
    // 设置 titleView
    MWICloudSearchBar *searchBar = [MWICloudSearchBar searchBar];
    // 设置尺寸
    searchBar.width = self.view.frame.size.width - 40;
    searchBar.height = 30;
    [searchBar becomeFirstResponder];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textChange) name:UITextFieldTextDidChangeNotification object:searchBar];
    self.navigationItem.titleView = searchBar;
    self.searchBar = searchBar;
}

/**
 *  监听搜索框文字改变
 */
- (void)textChange {
    // -1. 每次调用给方法, 都会给 self.searchFiles 数组中添加新的内容, 因此需要将数组清空
    if (self.searchFiles.count > 0) {
        [self.searchFiles removeAllObjects];
    }
    
    // 0. 设置 searchBar 的编辑状态
    self.isSearchBarEditing = YES;
    
    // 1. 移除遮罩
    [self.coverView dismiss];
    
    // 2. 搜索数据 (文件名)
    if (self.searchBar.text.length == 0) {  // 当 self.searchBar.text 为空时, 显示所有数据
        // self.searchFiles = self.files;  //   ?? 不能直接赋值
        for (MWICloudModel *model in self.files) {
            [self.searchFiles addObject:model];
        }
    }
    else {    // 当 self.searchBar.text 有值时, 显示搜索到的数据
        for (MWICloudModel *model in self.files) {
            NSString *name = [model.file_name stringByRemovingPercentEncoding];
            if ([name containsString:self.searchBar.text]) {
                [self.searchFiles addObject:model];
            }
        }
        if (self.searchFiles.count == 0) {      // 如果没有搜索到文件, 提示 "暂无数据"
            [[UIApplication sharedApplication].keyWindow showMessage:@"暂无数据" withTime:2.0];
        }
    }
    
    // 2.1 将 headerView 隐藏, 修改 tableView 的尺寸, 在取消搜索时恢复
    self.headerView.hidden = YES;
    CGFloat tableViewHeight = MWScreenHeight - MWICloudExpanViewHeight - MWICloudNavigationHeight - MWICloudTabBarHeight;
    self.tableView.frame = CGRectMake(0, 0, MWScreenWidth, tableViewHeight);
    
    // 3. 刷新数据
    [self.tableView reloadData];
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

/**
 *  搜索按钮点击后, 右侧导航按钮点击事件
 */
- (void)rightBarButtonClickWhenSearch {
    if (self.dropdownMenu) {
        [self.dropdownMenu dismiss];
    }
    
    // 0. 设置 searchBar 的编辑状态
    self.isSearchBarEditing = NO;
    
    // 1. 移除遮罩
    [self.coverView dismiss];
    
    // 2. 设置导航条状态
    [self setupNavigation];
    
    // 2.1 在搜索时隐藏了headerView, 改变了 tableView 的尺寸, 取消搜索时需要恢复
    self.headerView.hidden = NO;
    CGFloat tableViewY = MWICloudHeaderViewHeight + 5;
    CGFloat tableViewHeight = MWScreenHeight - MWICloudExpanViewHeight - MWICloudNavigationHeight - MWICloudTabBarHeight - MWICloudHeaderViewHeight;
    self.tableView.frame = CGRectMake(0, tableViewY, MWScreenWidth, tableViewHeight);
    
    // 3. 刷新表格
    [self.tableView reloadData];
}

- (void)rightBarButtonClick:(UIButton *)rightBarButton {
    if (self.dropdownMenu) {
        [self.dropdownMenu dismiss];
    }
    
    if (rightBarButton.selected == NO) {    // 普通状态, 点击后变为选中状态, 布局改变
        [self nomalToSelected:rightBarButton];
        // 导航栏左侧按钮
        if (self.leftBarButton) {
            self.leftBarButton.hidden = NO;
            return;
        } else {
            UIButton *leftBarButton = [UIButton buttonWithTarget:self action:@selector(leftBarButtonClick:) title:@"全选" selectTitle:@"全不选" color:MWICloudColor(255, 255, 255) font:15];
            self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:leftBarButton];
            self.leftBarButton = leftBarButton;
        }
        
    } else {
        [self selectedToNormal:rightBarButton];
        self.leftBarButton.hidden = YES;
    }
    
}

/**
 *  导航条右侧按钮状态 : normal(多选)ICloudCell --- > selected(取消)MWICloudEditCell, 左侧按钮显示(全不选)
 */
- (void)nomalToSelected:(UIButton *)rightBarButton {
    // 1. 改变按钮状态
    rightBarButton.selected = YES;
    self.leftBarButton.hidden = NO;
    if (self.leftButton) {
        self.leftButton.hidden = YES;
    }
    
    // 2. 将界面内下拉的 cell 合并, 避免循环引用  下拉菜单不会收起  问题
    NSArray *cells = [self.tableView visibleCells];
    for (ICloudCell *cell in cells) {
        if (cell.dropdownBtn.selected == YES) {
            [cell frameRecovery:cell];
        }
    }
    
    // 3. 隐藏系统的 tabBar 和扩容视图, 显示底部的文件操作视图
    self.expanView.hidden = YES;
    [self setupFooterView];
    
    // 刷新表格
    CGFloat tableViewHeight = self.view.frame.size.height - MWICloudFooterViewHeight;
    self.tableView.frame = CGRectMake(0, 55, MWScreenWidth, tableViewHeight);
    [self.tableView reloadData];
}

/**
 *  导航条右侧按钮状态 : selected(取消)MWICloudEditCell --- > normal(多选)ICloudCell
 */
- (void)selectedToNormal:(UIButton *)rightBarButton {
    // 1. 改变按钮状态
    rightBarButton.selected = NO;
    self.leftBarButton.hidden = YES;
    if (self.leftButton) {
        self.leftButton.hidden = NO;
    }
    
    // 2. 显示系统的 tabBar 和扩容视图, 隐藏底部的文件操作视图
    self.expanView.hidden = NO;
    [self.footerView removeFromSuperview];
    self.footerView = nil;
    
    // 3. 将 chooseFiles 中的数据清空, 取消 MWICloudEditCell 的选择
#warning 在点击取消时, 将选中的 cell 取消选中
    [self deselectedCell];
    [self.chooseFiles removeAllObjects];
    [self.footerView setTitleWithFilesCount:self.chooseFiles.count];
    
    // 4. 刷新表格
    CGFloat tableViewHeight = self.view.frame.size.height - MWICloudExpanViewHeight - MWICloudFooterViewHeight;
    self.tableView.frame = CGRectMake(0, 55, MWScreenWidth, tableViewHeight);
    [self.tableView reloadData];
}

/**
 *  取消 cell 的选中状态
 */
- (void)deselectedCell {
    for (MWICloudModel *editModel in self.chooseFiles) {
        for (MWICloudModel *model in self.files) {
//            if ([editModel.file_name isEqualToString:model.file_name]) {   // 取消当前选中文件
            if (editModel == model) {   // 取消当前选中文件
                editModel.isEditing = NO;
            }
        }
    }
}

- (void)leftBarButtonClick:(UIButton *)leftBarButton {
    if (self.leftBarButton.selected) {   // 选中状态, 点击时取消全选, 就是全不选
        // 1. 移除 chooseFiles 中的所有数据, 数组为空
        [self.chooseFiles removeAllObjects];
        
        // 2. 遍历所有files 中的模型数据, 将其编辑属性设置为 no
        for (MWICloudModel *model in self.files) {
            model.isEditing = NO;
        }
        
    } else {    // 非选中状态, 点击时选中所有文件, 此时chooseFiles中没有数据
        // 1. 将files中的所有数据添加到 chooseFiles 中
        for (MWICloudModel *model in self.files) {
            model.isEditing = YES;
            [self.chooseFiles addObject:model];
        }
    }
    // 刷新表格
    [self.tableView reloadData];
    
    // 设置footerView 内部按钮标题
    [self.footerView setTitleWithFilesCount:self.chooseFiles.count];
    
    // 设置按钮反选
    self.leftBarButton.selected = !self.leftBarButton.selected;
}

/**
 *  创建titleView
 */
- (void)setupTitleView:(NSString *)title {
    UILabel *titleView = [[UILabel alloc] init];
    titleView.text = title;
    titleView.font = [UIFont systemFontOfSize:20];
    titleView.textColor = MWICloudColor(255, 255, 255);
    titleView.size = [titleView.text sizeWithWidth:MAXFLOAT font:titleView.font];
    self.navigationItem.titleView = titleView;
}

/**
 *  添加头部视图(5个按钮)
 */
- (void)setupHeaderView {
    // 防止频繁创建和重复创建
    if (self.headerView) return;
    MWICloudHeaderView *headerView = [MWICloudHeaderView icloudHeaderView];
    headerView.frame = CGRectMake(0, 0, MWScreenWidth, MWICloudHeaderViewHeight);
    headerView.delegate = self;
    [self.view addSubview:headerView];
    self.headerView = headerView;
}

/**
 *  添加中间视图tableView
 */
- (void)setupTableView {
    // 5 是顶部视图和 tableView 的间距
    if (self.tableView) return;
    CGFloat tableViewY = MWICloudHeaderViewHeight + 5;
    CGFloat tableViewHeight = MWScreenHeight - MWICloudExpanViewHeight - MWICloudNavigationHeight - MWICloudTabBarHeight - MWICloudHeaderViewHeight;
    UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, tableViewY, MWScreenWidth, tableViewHeight)];
    
    // 设置 cell 的分割线不显示
    tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    
    self.tableView.backgroundColor = [UIColor redColor];
    tableView.delegate = self;
    tableView.dataSource = self;
    tableView.hidden = NO;
    [self.view addSubview:tableView];
    self.tableView = tableView;
}

/**
 *  添加底部视图
 */
- (void)setupExpanView {
    // 防止频繁创建和重复创建
    if (self.expanView) return;
    MWICloudExpanView *expanView = [MWICloudExpanView iCloudFooterView];
    CGFloat expanViewX = 0;
    CGFloat expanViewY = MWScreenHeight - MWICloudTabBarHeight - MWICloudExpanViewHeight - MWICloudNavigationHeight;
    CGFloat expanViewW = MWScreenWidth;
    expanView.frame = CGRectMake(expanViewX, expanViewY , expanViewW, MWICloudExpanViewHeight);
    
#warning -- 测试数据(当前使用空间和总空间) , 需要获得真实的数值
    expanView.currentCapacity = 90.8;
    expanView.totalCapacity = 2000;
    [expanView setProgress:expanView.currentCapacity totalCapacity:expanView.totalCapacity];
    expanView.delegate = self;
    [self.view addSubview:expanView];
    self.expanView = expanView;
}

/**
 *  添加底部视图
 */
- (void)setupFooterView {
    // 防止频繁创建和重复创建
    if (self.footerView)  return;
    MWICloudFooterView *footerView = [MWICloudFooterView footerView];
    CGFloat footerX = 0;
    CGFloat footerW = MWScreenWidth;
    // 坐标 Y 值 = 屏幕高度 - 自身高度 - 导航高度
    CGFloat footerY = MWScreenHeight - MWICloudFooterViewHeight;
    footerView.frame = CGRectMake(footerX, footerY, footerW, MWICloudFooterViewHeight);
    footerView.delegate = self;
    
    if (self.chooseFiles) {     // 修复从下级界面返回后, 按钮标题没有正确显示选中文件的个数
        [footerView setTitleWithFilesCount:self.chooseFiles.count];
    }
    
    [self.view.window addSubview:footerView];
    self.footerView = footerView;
}

#pragma mark -- UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (self.isSearchBarEditing == NO) {
        return self.files.count;
    } else {
        return self.searchFiles.count;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (self.isSearchBarEditing == NO) {
        if (self.rightBarButton.selected == NO) {
            ICloudCell *cell = [ICloudCell cellWithTableView:tableView];
            cell.model = self.files[indexPath.row];
            cell.delegate = self;
            
            // 修复 cell 循环利用时, 下拉菜单不会隐藏的 BUG
            if (cell.dropdownBtn.selected == YES) {
                [cell frameRecovery:cell];
            }
            
            __weak typeof(self) vc = self;
            // 按钮点击后, 改变点击的cell 的高度
            [cell frameChange:^(ICloudCell *cell,  CGFloat height, BOOL isExpan) {
                // 按钮点击后, 先检查是否已经有按钮被点击了, 如果以前有按钮被点击, 将以前点击的按钮恢复为正常状态
                if (vc.preCell) {
                    [vc.preCell frameRecovery:vc.preCell];
                }
                vc.cell = cell;
                vc.isExpan = isExpan;
                vc.indexPath = [vc.tableView indexPathForCell:cell];
                // 更新 cell 的高度, 内部会调用 heightForRowAtIndexPath 方法
                [vc.tableView beginUpdates];
                vc.height = height;
                [vc.tableView endUpdates];
            }];
            return cell;
        } else {
            MWICloudEditCell *cell = [MWICloudEditCell cellWithTableView:tableView];
            cell.model = self.files[indexPath.row];
            cell.delegate = self;
            return cell;
        }
    } else {
        MWICloudMoveCell *cell = [MWICloudMoveCell cellWithTableView:tableView];
        cell.model = self.searchFiles[indexPath.row];
        return cell;
    }
}

#pragma mark -- UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (self.rightBarButton.selected == NO) {
        if (self.cell && self.isExpan) {
            // 找到点击的那一行, 改变高度 (如果点击的是最后一行, 后面所有的 cell 高度都发生改变???)
            if (indexPath.row == self.indexPath.row && indexPath.section == self.indexPath.section) {
                self.isExpan = !self.isExpan;
                self.preCell = self.cell;
                return self.height;
            } else {
                return 44;
            }
        } else {
            return 44;
        }
    } else {
        return 44;
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    // 重新设置 title
    NSString *title = [[self.files[indexPath.row] file_name] stringByRemovingPercentEncoding];
    [self setupTitleView:title];
    
    // 设置左侧导航条的按钮
    UIButton *leftButton = [UIButton buttonWithTarget:self action:@selector(back) image:@"backbutton" selectImage:nil];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:leftButton];
    self.leftButton = leftButton;
    
    // 清空以前的数据
    [self.files removeAllObjects];
    
    // 重新获得数据  --- >  读取plist文件 (模拟数据)
    NSString *path = [[NSBundle mainBundle] pathForResource:@"subFiles.plist" ofType:nil];
    NSArray *array = [NSArray arrayWithContentsOfFile:path];
    
    for (NSDictionary *dict in array) {
        MWICloudModel *model = [MWICloudModel modelWithDict:dict];
        [self.files addObject:model];
    }
    
    // 刷新表格
    [self.tableView reloadData];
}

- (void)back {
#warning 返回上一个文件目录, 当返回到云空间主界面时, self.leftButton == nil;
    NSLog(@"返回上一个文件目录");
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark -- ICloudCellDelegate  右侧按钮 没有 选中时 ICloudCell 点击的代理方法
- (void)iCloudCell:(ICloudCell *)icloudCell buttonType:(ICloudCellButtonType)type {
    switch (type) {
        /**  系统文件下载 */
        case ICloudCellButtonTypeSystemFolderDownload:
        /**  普通文件下载 */
        case ICloudCellButtonTypeNormalFolderDownload:
            [self.chooseFiles addObject:icloudCell.model];
            [self addToDownloadList:self.chooseFiles];
            break;
            
        /**  普通文件删除 */
        case ICloudCellButtonTypeNormalFolderDelete:{
            // 将点击的 cell 添加到数组中
            [self.chooseFiles addObject:icloudCell.model];
            [self deleteFiles:self.chooseFiles];
            break;
        }
        /**  普通文件更多操作 */
        case ICloudCellButtonTypeNormalFolderMore: {
            UIActionSheet *moreSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:nil otherButtonTitles:@"重命名", @"移动", nil];
            [moreSheet showInView:self.view.window];
            self.moreSheet = moreSheet;
            break;
        }
        default:
            break;
    }
#warning 是否需要将当前点击的 cell 收起? 当正在搜索时, 是否退出搜索?
//    [icloudCell frameRecovery:icloudCell];
//    [self.tableView reloadData];
}

#pragma mark -- MWICloudHeaderViewDelegate  头部视图的代理方法
- (void)iCludeHeaderView:(MWICloudHeaderView *)icloudHeaderView buttonType:(MWICloudHeaderViewButtonType)buttonType {
    switch (buttonType) {
        /**  新建文件夹 */
        case MWICloudHeaderViewButtonTypeAdd:
            self.addFolerView = [UIAlertView alertViewTitle:@"新建文件夹" message:nil delegate:self cancleButton:@"取消" confirmButton:@"确定" isNeedsInput:YES];
            break;
            
        /**  排序 */
        case MWICloudHeaderViewButtonTypeSort:
            [self sortButtonClick];
            break;
            
        /**  下载 */
        case MWICloudHeaderViewButtonTypeUpload:
            [self uploadButtonClick];
            break;
            
        /**  搜索, xuyao 更改界面的布局 */
        case MWICloudHeaderViewButtonTypeSearch:
            [self searchButtonClick];
            break;
            
        /**  上传下载排序 */
        case MWICloudHeaderViewButtonTypeList:
            [self listButtonClick];
            break;
            
        default:
            break;
    }
}

#pragma mark -- UIAlertViewDelegate -- 顶部视图添加文件夹按钮点击
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if (alertView == self.addFolerView) {   // 新建文件夹 alertView
        if (buttonIndex == 1) {
            // 获得 alertView 中输入的文字(用户输入的文件名)
            UITextField *textField = [alertView textFieldAtIndex:0];
            [self createNewFolder:textField.text];
        }
    } else {    // alertView == self.renameView  重命名 alertView
        if (buttonIndex == 1) {     // 文件重命名
            // 获得 alertView 中输入的文字(用户输入的文件名)
            UITextField *textField = [alertView textFieldAtIndex:0];
            
            // 1. 获得当前点击文件的类型
            NSString *file_type = self.cell.model.file_type;
            
            // 2. 取得当前目录下 file_type 这种所有类型的文件名
            NSMutableArray *names = [self allFolderNames:file_type];
            
            // 3. 使用文件工具类获得 新的文件名
            self.cell.model.file_name = [[MWICloudFolderTool sharedMWICloudFolderTool] rename:self.cell.model.file_name expectName:textField.text inNames:names];
            
            // 4. 刷新表格
            NSIndexPath *indexPath = [self.tableView indexPathForCell:self.cell];
            [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationBottom];
            
#warning 后台修改数据
        }
    }
}

/**  创建一个文件夹 */
- (void)createNewFolder:(NSString *)title {
    // 向 tableView 的数据源中插入一条数据
    // 2.1 获得当前界面的所有文件名
    NSMutableArray *names = [NSMutableArray array];
    for (MWICloudModel *model in self.files) {
        // 判断 model.file_name 是否是文件夹(根据 model 的 isFolder 属性), 如果是添加到 names 数组中
        if ([model.file_type isEqualToString:FileTypeFolder]) {   // 是文件夹, 添加到文件名数组中
            [names addObject:model.file_name];
        }
    }
    MWICloudModel *model = [[MWICloudFolderTool sharedMWICloudFolderTool] createNewFolder:title currentPathFolderNames:names];
    [self.files addObject:model];
    
    // 默认新建的文件夹在最后一行, 获得最后一行的 indexPath
    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:(self.files.count - 1) inSection:0];
    // 只刷新最后一行, 添加文件夹
    // 使用 reloadData 会使整个 tableView 的数据进行一次刷新, 影响系统性能
    [self.tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationBottom];
    
#warning 通知后台, 创建一个文件夹
}

/**
 *  顶部视图排序按钮点击
 */
- (void)sortButtonClick {
    MWDropdownMenu *menu = [MWDropdownMenu menu];
    menu.image = @"home_alertViewbg";
    
    menu.spaceX = 30;
    menu.spaceY = 15;
    
    MWDropdownViewController *dropdown = [[MWDropdownViewController alloc] init];
    menu.contentController = dropdown;
    dropdown.delegate = self;
    [menu showFrom:self.headerView];
    [self.view addSubview:menu];
    self.dropdownMenu = menu;
}

/**
 *  顶部视图 上传 按钮点击 选择相册中的文件上传
 */
- (void)uploadButtonClick {
//    UzysAssetsPickerController *picker = [[UzysAssetsPickerController alloc] init];
//    [self presentViewController:picker animated:YES completion:nil];
//    return;
    MWUploadChooseView *uploadView = [MWUploadChooseView uploadChooseView];
    uploadView.frame = CGRectMake(0, 0, MWScreenWidth, MWScreenHeight);
    uploadView.delegate = self;
    
    // 需要添加到主窗口才可以挡住tabBar
//    UIWindow *window = [UIApplication sharedApplication].keyWindow;
    [[UIApplication sharedApplication].keyWindow addSubview:uploadView];
}

/**
 *  顶部视图 搜索 按钮点击 搜索当前目录下的文件\文件夹
 */
- (void)searchButtonClick {
    // 1. 设置导航条
    [self setupNavigationWhenSearch];
    
    // 2. 让界面回到初始界面, 即 cell 不能被编辑的状态
    if (self.rightBarButton.selected == YES) {
        self.rightBarButton.selected = NO;
        self.leftBarButton.hidden = YES;
        [self.tableView reloadData];
    }
    
    // 3. 添加一个全屏的遮罩
    [self addCover];
}

// 添加遮罩
- (void)addCover {
    // 添加一个全屏的遮罩
    MWCoverView *coverView = [MWCoverView coverView];
    coverView.delegate = self;
    [coverView show];
    self.coverView = coverView;
}

#pragma mark -- MWCoverViewDelegate 搜索  遮罩 的代理
//- (void)coverViewDidshow {
//    // 1. 更换右侧导航按钮 ---> "取消"
//    [self setupNavigationWhenSearch];
//}

- (void)coverViewDismiss {
    // 1. 重新设置导航条
    if (self.isSearchBarEditing == YES) return;
    [self setupNavigation];
}

/**
 *  顶部视图 列表 按钮点击 跳转到上传下载列表
 */
- (void)listButtonClick {
    MWICloudListViewController *list = [[MWICloudListViewController alloc] init];
    [self.navigationController pushViewController:list animated:YES];
}

#pragma mark -- MWUploadChooseViewDelegate  上传按钮下拉菜单按钮点击代理方法
- (void)uploadChooseView:(MWUploadChooseView *)uploadChooseView didClickButton:(MWUploadChooseViewButtonType)type {
    switch (type) {
        case MWUploadChooseViewUploadPhoto:     // 上传图片
            [self uploadResourceType:ALAssetTypePhoto];
            break;
            
        case MWUploadChooseViewUploadVideo:     // 上传视频
            [self uploadResourceType:ALAssetTypeVideo];
            break;
            
        default:
            break;
    }
}

/**
 *  上传图片, 访问用户相册
 */
- (void)uploadResourceType:(NSString *)type {
    MWAlbumViewController *album = [[MWAlbumViewController alloc] init];
    // 上传文件的类型
    album.type = type;
    album.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:album animated:YES];
}

#pragma mark -- MWDropdownViewControllerDelegate  排序按钮下拉菜单点击代理方法
- (void)dropdownViewControllerDidClickRow:(NSUInteger)row {
    switch (row) {
        case 0: // 按文件夹、视频文件、照片文件的顺序进行排序，相同类型文件按时间倒序排序
            [self sortByType];
            break;
        case 1: // 按文件和文件夹名称的字幕拼音进行排序
            [self sortByName];
            break;
        case 2: // 按所有文件的上传时间，进行倒序排序
            [self sortByTime:self.files];
            break;
            
        default:
            break;
    }
    // 刷新表格
    [self.tableView reloadData];
    // 点击下拉框后, 视图消失
    [self.dropdownMenu dismiss];
}

/**
 *  按文件夹、视频文件、照片文件的顺序进行排序，相同类型文件按时间倒序排序
 */
- (void)sortByType {
    // 1. 取出所有的文件夹
    NSMutableArray *folders = [self allFolders:FileTypeFolder];
    [self sortByTime:folders];
    
    // 2. 取出视频文件
    NSMutableArray *videos = [self allFolders:FileTypeVideo];
    [self sortByTime:videos];
    
    // 3. 取出音频文件
    NSMutableArray *audios = [self allFolders:FileTypeAudio];
    [self sortByTime:audios];
    
    // 4. 取出图片文件
    NSMutableArray *photos = [self allFolders:FileTypePic];
    [self sortByTime:photos];
    
    // 清空数据源
    [self.files removeAllObjects];
    
    // 将排序后的数组中的 数据模型按顺序 传递给 self.files
    for (MWICloudModel *model in folders) {
        [self.files addObject:model];
    }
    for (MWICloudModel *model in videos) {
        [self.files addObject:model];
    }
    for (MWICloudModel *model in audios) {
        [self.files addObject:model];
    }
    for (MWICloudModel *model in photos) {
        [self.files addObject:model];
    }
}

/**  获得 file_type 类型的所有文件 */
- (NSMutableArray *)allFolders:(NSString *)file_type {
    NSMutableArray *folders = [NSMutableArray array];
    for (MWICloudModel *model in self.files) {
        if ([model.file_type isEqualToString:file_type]) {
            [folders addObject:model];
        }
    }
    return folders;
}

/**  获得 file_type 类型的所有文件名称 */
- (NSMutableArray *)allFolderNames:(NSString *)file_type {
    // 如果传入的文件类型不是   folder:文件 pic:图片 video:视频 audio:音频, 不做任何操作, 提示
    NSMutableArray *names = [NSMutableArray array];
    for (MWICloudModel *model in self.files) {
        // 文件类型有误: 实际上不存在, 因为文件类型是从文件中获取的
        if (![file_type isEqualToString:FileTypePic] && ![file_type isEqualToString:FileTypeVideo]
            &&![file_type isEqualToString:FileTypeAudio] && ![file_type isEqualToString:FileTypeFolder]) {
            [[UIApplication sharedApplication].keyWindow showMessage:@"文件类型错误:\n文件名:folder 视频:video 音频:audio 图片:pic" withTime:2.0];
        }
        
        if ([model.file_type isEqualToString:file_type]) {
            [names addObject:model.file_name];
        }
    }
    return names;
}

/**
 *  对文件按照时间  倒序排列
 */
- (void)sortByTime:(NSMutableArray *)array {
    if (array.count == 0)    return;
    
    [array sortUsingComparator:^NSComparisonResult(MWICloudModel *obj1, MWICloudModel *obj2) {
        if ([obj1.file_createtime longLongValue] > [obj2.file_createtime longLongValue]) {
            return NSOrderedAscending;
        } else {
            return NSOrderedDescending;
        }
    }];
}

/**
 *  按文件和文件夹名称的字幕拼音进行排序
 */
- (void)sortByName {
    [self.files sortUsingComparator:^NSComparisonResult(MWICloudModel *obj1, MWICloudModel *obj2) {
        if (obj1.file_name > obj2.file_name) {
            return NSOrderedDescending;
        } else {
            return NSOrderedDescending;
        }
    }];
}

#pragma mark -- MWICloudEditCellDelegate  右侧按钮选中时的 MWICloudEditCell 的代理方法
- (void)iCloudEditCell:(MWICloudEditCell *)editCell didClickChooseButton:(UIButton *)button {
    if (button.selected == YES) {   // 选中某一行
        
        editCell.model.isEditing = YES;
        [self.chooseFiles addObject:editCell.model];
    } else {    // 取消选中某一行
        editCell.model.isEditing = NO;
        [self.chooseFiles removeObject:editCell.model];
    }
    // 设置footerView 内部按钮标题
    [self.footerView setTitleWithFilesCount:self.chooseFiles.count];
}


#pragma mark -- MWICloudExpanViewDelegate 底部视图扩容按钮点击
- (void)iCloudExpanView:(MWICloudExpanView *)expanView didClickExpandButton:(UIButton *)button {
#warning 扩容后需要更新空间使用情况
    MWICloudExpanViewController *expan = [[MWICloudExpanViewController alloc] initWithNibName:@"MWICloudExpanViewController" bundle:nil];
    expan.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:expan animated:YES];
}

#pragma mark -- MWICloudFooterViewDelegate  底部视图代理方法
- (void)iCloudFooterView:(MWICloudFooterView *)footerView buttonType:(MWICloudFooterViewButtonType)type {
    switch (type) {
            /**  底部视图下载按钮点击, 添加到下载列表中, 并返回主界面 */
        case MWICloudFooterViewButtonTypeDownload:
            [self addToDownloadList:self.chooseFiles];
            break;
            
            /**  底部视图移动按钮 */
        case MWICloudFooterViewButtonTypeMove:
            // 需要对选中的文件夹操作
            [self clickMoveButton:self.chooseFiles];
            break;
            
            /**  底部视图删除按钮 */
        case MWICloudFooterViewButtonTypeDelete:
            [self clickDeleteButton:self.chooseFiles];
            break;
        default:
            break;
    }
}

/**
 *  将选中的数据添加到下载列表中 <下载列表在下载界面才能获得, 考虑使用文件工具类的单例保存下载列表>
 */
- (void)addToDownloadList:(NSMutableArray *)chooseFiles {
    NSMutableArray *download = [MWICloudFolderTool sharedMWICloudFolderTool].downloadList;
    
    // 要将选择的文件的 isDownloading 属性设置为 YES
    for (MWICloudModel *model in chooseFiles) {
        model.isDownloading = YES;
        [download addObject:model];
    }
    
    if (self.rightBarButton.selected == YES) {
        // 返回主界面, 相当于点击了导航栏右侧按钮
        [self selectedToNormal:self.rightBarButton];
    }
    
    // 显示提示框
    [[UIApplication sharedApplication].keyWindow showMessage:@"添加至下载列表" withTime:2.0];
    
    // 将 chooseFiles 的数据清空
    [self.chooseFiles removeAllObjects];
}

/**  底部视图移动按钮点击 */
- (void)clickMoveButton:(NSMutableArray *)files {
    if (!files) return;
    if (files.count == 0 ) {    // 提示用户没有选中任何文件夹
        [UIAlertView alertViewShowForEmptyChoose];
    } else {
        if ([self isContainSystemFiles:files]) {     // 选中系统文件
            [UIAlertView alertViewshowMessage:@"系统文件不支持移动" cancleButton:nil confirmButton:@"我知道了"];
        } else {    // 没有选中系统文件夹, 移动文件夹  --- > 跳转至移动位置选择界面
            // 如果是文件夹, 下一页界面的数据源不包含当前选中的文件; 如果是文件, 下一界面的文件夹按照时间上传倒序排列
            [self moveFiles:files];
        }
    }
}
#pragma mark -- 判断选中的文件是否包含了系统文件夹
- (BOOL)isContainSystemFiles:(NSMutableArray *)files {
    // 是否包含系统文件夹得标记
    BOOL isContainSystemFiles = NO;
    for (MWICloudModel *model in files) {
        NSString *filename = [model.file_name stringByRemovingPercentEncoding];
        if ([filename isEqualToString:@"系统文件夹"]) {  //选中系统文件
            isContainSystemFiles = YES;
            break;
        } else {    // 没有选中系统文件
            isContainSystemFiles = NO;
        }
    }
    return isContainSystemFiles;
}

/**  移动文件 */
- (void)moveFiles:(NSMutableArray *)files {
    // 遍历数组 files( == self.chooseFiles), 如果没有文件夹, 下一页的数据源就是 self.files 中的所有文件夹chooses
    NSMutableArray *chooses = [NSMutableArray array];
    // 取出当前界面的所有文件夹, 数据和云空间主页的数据一致
    for (MWICloudModel *model in self.files) {
        if ([model.file_type isEqualToString:FileTypeFolder]) {
            [chooses addObject:model];
        }
    }
    // 去掉选中的文件夹
    for (MWICloudModel *model in files) {
        if ([model.file_type isEqualToString:FileTypeFolder]) {
            [chooses removeObject:model];
        }
    }
    
    // 单例中保存的文件数组, 是当前选中的文件
    [MWICloudFolderTool sharedMWICloudFolderTool].chooses = self.chooseFiles;
    MWMoveViewController *move = [[MWMoveViewController alloc] init];
    // 2. 初始化数据源
    move.files = chooses;
    // 3. 设置代理, 在完成文件移动后调用
    move.delegate = self;
    // 4. 界面跳转之前, 将选中的 cell 取消选中
    [self deselectedCell];
    [self.navigationController pushViewController:move animated:YES];
}

#pragma mark -- MWMoveViewControllerDelegate  文件移动完成的代理方法
- (void)moveViewControllerDidFinishMoveFolder {     // 就是将云空间主界面右侧按钮  selected(取消)MWICloudEditCell --- > normal(多选)ICloudCell
    [self selectedToNormal:self.rightBarButton];
}

/**  底部视图删除按钮点击 */
- (void)clickDeleteButton:(NSMutableArray *)files {
    if (!files)    return;
    if (files.count == 0 ) {    // 提示用户没有选中任何文件夹
        [UIAlertView alertViewShowForEmptyChoose];
    } else {
        if ([self isContainSystemFiles:files]) {     // 选中系统文件
            [UIAlertView alertViewshowMessage:@"系统文件不能删除" cancleButton:nil confirmButton:@"我知道了"];
        } else {    // 没有选中系统文件夹
            UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@"你确定删除该文件吗?" delegate:self cancelButtonTitle:@"取消" destructiveButtonTitle:@"确定删除" otherButtonTitles:nil, nil];
            [actionSheet showInView:self.view.window];
            self.deleteSheet = actionSheet;
        }
    }
}

#pragma mark -- UIActionSheetDelegate
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    if (actionSheet == self.deleteSheet) {  // 底部视图删除按钮点击
        if (buttonIndex == 0) {     // 确定删除, 只需要监听删除按钮点击
            [self deleteFiles:self.chooseFiles];
        }
    } else {    // actionSheet == self.moreSheet    cell 内部更多操作按钮点击
        if (buttonIndex == 0) {     // 重命名
            self.renameView = [UIAlertView alertViewTitle:@"重命名" message: nil delegate:self cancleButton:@"取消" confirmButton:@"确定" isNeedsInput:YES];
        } else if (buttonIndex == 1) {  // 移动
        
        }
    }
}

/** 删除文件 */
- (void)deleteFiles:(NSMutableArray *)files {
    for (MWICloudModel *model in files) {
        // 1. 删除数据源
        [self.files removeObject:model];
    }
    // 2. 刷新表格
    [self.tableView reloadData];
    // 3. 清空 chooseFiles 中的内容
    [self.chooseFiles removeAllObjects];
    // 4. 设置底部视图按钮上的文字
    [self.footerView setTitleWithFilesCount:self.chooseFiles.count];
#warning  通知服务器, 删除所选文件
    
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
