//
//  MWCreateNewFolder.m
//  ICloudSpace
//
//  Created by 李亚飞 on 15/10/6.
//
//

#import "MWICloudFolderTool.h"
#import "MWICloudModel.h"

@implementation MWICloudFolderTool

Singleton(MWICloudFolderTool)

/**
 *  @return  重命名后的文件名, names 中所有文件名的后缀和要修改的文件一致
 */
- (NSString *)rename:(NSString *)oldName expectName:(NSString *)expectName inNames:(NSMutableArray *)names {
    // 如果当前目录下没有文件, 直接返回 expectName 作为文件夹的名称
    if (names.count == 0 || !names)  return expectName;
    
    // 1. 判断需要修改名称的是否是文件夹, 一般根据文件名是否包含 '.' 分隔符
    if ([oldName containsString:@"."]) {    // 不是文件夹
        // 1.1 找到 oldName '.' 的位置, 文件名前缀, 后缀
        NSRange range = [oldName rangeOfString:@"."];
        NSUInteger loc = range.location;
        NSString *prefix = [oldName substringToIndex:loc];  // 前缀
        NSString *suffix = [oldName substringFromIndex:loc]; // 后缀(包含'.')
        
        // 将 names 中的文件后缀去掉, 当成文件夹修改文件名, 获得新的文件名后在把后缀拼接上
        NSMutableArray *tempNames = [NSMutableArray array];
        for (NSString *name in names) {
            NSRange prefixName = [name rangeOfString:@"."];
            NSString *tempName = [name substringToIndex:prefixName.location];
            [tempNames addObject:tempName];
        }
        
        // 使用 expectName 遍历没有后缀名的文件名, 如果没有相等的, 直接返回expectName, 否则生成新的文件名
        for (NSString *name in tempNames) {
            if ([name isEqualToString:expectName]) {
                expectName = [self fileName:prefix inNames:tempNames];
            } else {
                expectName = [NSString stringWithFormat:@"%@", expectName];
            }
        }
        
        // 得到没有后缀的文件名
        expectName = [NSString stringWithFormat:@"%@%@", expectName, suffix];
    } else {    // 文件夹
        expectName = [self fileName:expectName inNames:names];
    }
    return expectName;
}

/**
 *  @return 新建文件夹的文件名
 */
- (NSString *)fileName:(NSString *)filename inNames:(NSMutableArray *)names {
    // 如果当前目录下没有文件, 直接返回 filename 作为文件夹的名称
    if (names.count == 0 || !names)  return filename;
    
    // 记录原始的名称, 要保证原始的名称不变
    for (NSString *name in names) {
        if ([filename isEqualToString:name]) {
            // 文件夹名称从 XX(1)开始
            int index = 1;
            // 当 index > 1 时, 文件名称已经经过拼接, 需要将拼接的字符串去掉
#pragma mark 限制了带有括号的同名文件, 没有限制像 aaa 这样的重复文件名
            if ( [filename containsString:@"("]) {
                // 获得括号内的数字
                NSUInteger locLeft = [filename rangeOfString:@"("].location;
                NSUInteger locRight = [filename rangeOfString:@")"].location;
                NSRange rangeIndex = {locLeft + 1, locRight - locLeft - 1};
                index = [[filename substringWithRange:rangeIndex] intValue];
                
                // 获得括号前的文件名称
                NSRange range = {0, locLeft};
                filename = [filename substringWithRange:range];
                index ++;
                filename = [NSString stringWithFormat:@"%@(%d)", filename, index];
                filename = [self fileName:filename inNames:names];
            } else {
                filename = [NSString stringWithFormat:@"%@(%d)", filename, index];
                index ++;
                filename = [self fileName:filename inNames:names];
            }
        } else {
            return filename;
        }
    }
    return filename;
}

/**
 *  返回一个在当前目录下的空文件模型
 */
- (MWICloudModel *)createNewFolder:(NSString *)filename currentPathFolderNames:(NSMutableArray *)names {
    MWICloudModel *model = [[MWICloudModel alloc] init];
    
    // 1. 得到文件名
    model.file_name = [self fileName:filename inNames:names];
    
    // 2. 获得文件创建的时间, 发送请求的时间(或者是服务器返回创建成功后的时间)
    NSDate *date = [NSDate date];
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
    format.dateFormat = @"yyyy-MM-dd HH:mm";
    model.file_createtime = [format stringFromDate:date];
    
    // 3. 是否是文件夹属性
    model.file_type = @"folder";
    
    // 4. 是否正在编辑属性
    model.isEditing = NO;
    
    return model;
}

- (NSMutableArray *)chooses {
    if (!_chooses) {
        self.chooses = [NSMutableArray array];
    }
    return _chooses;
}

- (NSMutableArray *)downloadList {
    if (!_downloadList) {
        self.downloadList = [NSMutableArray array];
    }
    return _downloadList;
}

- (NSMutableArray *)uploadList {
    if (!_uploadList) {
        self.uploadList = [NSMutableArray array];
    }
    return _uploadList;
}

//- (void)setDownloadList:(NSMutableArray *)downloadList {
//    _downloadList = downloadList;
//}

//- (NSMutableArray *)downloadList {
//    if (!_downloadList) {
//        // 读取plist文件
//        NSString *path = [[NSBundle mainBundle] pathForResource:@"downloadList.plist" ofType:nil];
//        NSArray *array = [NSArray arrayWithContentsOfFile:path];
//        
//        NSMutableArray *f = [NSMutableArray array];
//        for (NSDictionary *dict in array) {
//            MWICloudModel *model = [MWICloudModel modelWithDict:dict];
//            [f addObject:model];
//        }
//    }
//    return _downloadList;
//}

//- (void)setUploadList:(NSMutableArray *)uploadList {
//    _uploadList = uploadList;
//}

//- (NSMutableArray *)uploadList {
//    if (!_uploadList) {
//        // 读取plist文件
//        NSString *path = [[NSBundle mainBundle] pathForResource:@"uploadList.plist" ofType:nil];
//        NSArray *array = [NSArray arrayWithContentsOfFile:path];
//        
//        NSMutableArray *f = [NSMutableArray array];
//        for (NSDictionary *dict in array) {
//            MWICloudModel *model = [MWICloudModel modelWithDict:dict];
//            [f addObject:model];
//        }
//    }
//    return _uploadList;
//}
@end
