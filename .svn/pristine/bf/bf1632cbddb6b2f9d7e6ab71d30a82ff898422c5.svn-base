//
//  XMNPhotoPreviewController.m
//  XMNPhotoPickerFrameworkExample
//
//  Created by XMFraker on 16/1/29.
//  Copyright © 2016年 XMFraker. All rights reserved.
//

#import "XMNPhotoPreviewController.h"
#import "XMNPhotoPickerController.h"

#import "XMNAssetModel.h"
#import "XMNPhotoPickerDefines.h"

#import "XMNBottomBar.h"
#import "XMNPhotoPreviewCell.h"


#import "UIView+Animations.h"
#import "UIViewController+XMNPhotoHUD.h"

#import "XMNPhotoManager.h"
#import "MC_OrderAndMaterialCtrl.h"

#import "UserEntity.h"

#import "CustomeClass.h"

@interface XMNPhotoPreviewController ()

@property (nonatomic, strong) UIView *topBar;
@property (nonatomic, weak)   UIButton *stateButton;

@property (nonatomic, strong) XMNBottomBar *bottomBar;

@property (nonatomic, strong) AVPlayerItem * playItem;

@property (nonatomic, strong) AVPlayer * player;

@property (nonatomic, strong) AVPlayerLayer * playerLayer;

/** 当前已经选中的所有素材（数据库中保存的）*/
@property (nonatomic, strong) NSArray * selectMaterialInDbArray;

@end

@implementation XMNPhotoPreviewController

- (NSArray *)selectMaterialInDbArray{
    if (!_selectMaterialInDbArray) {
        _selectMaterialInDbArray = [[MC_OrderAndMaterialCtrl GetMaterial:[[UserEntity sharedSingleton].customerId intValue] Orderid:self.currentOrderId] copy];
    }
    return _selectMaterialInDbArray;
}

static NSString * const kXMNPhotoPreviewIdentifier = @"XMNPhotoPreviewCell";

- (void)viewDidLoad {
    [super viewDidLoad];
    
//    如果是创建页面预览，在这里找到那些素材
    if (!self.isShowSelectButton) {
        [CustomeClass hudShowWithView:self.view Tag:123];
        
        DEFAULTQUEUEANALYSISANDMAINQUEUEUPDATEUI({
            //获取所有相册文件夹得信息
            WEAKSELF(weakSelf);
            [[XMNPhotoManager sharedManager] getAlbumsPickingVideoEnable:YES completionBlock:^(NSArray<XMNAlbumModel *> *albums) {
                NSMutableArray * tempMuArray = [NSMutableArray new];
                __block int i = 0;
                for (XMNAlbumModel * albumModel in albums) {
                    [[XMNPhotoManager sharedManager] getAssetsFromResult:albumModel.fetchResult pickingVideoEnable:YES completionBlock:^(NSArray<XMNAssetModel *> *assets) {
                        
                        for (XMNAssetModel * assModel in assets) {
                            BOOL isHave = NO;
                            for (NewOrderVideoMaterial *newOrderVideoMaterial in self.selectMaterialInDbArray) {
                                if ([newOrderVideoMaterial.material_assetsURL isEqualToString:assModel.imageUrl]) {
                                    isHave = YES;
                                }
                            }
                            if (isHave) {
                                [tempMuArray addObject:assModel];
                            }
                        }
                        
                        if (i == albums.count - 1) {
                            NSMutableArray * tempMuArray2 = [NSMutableArray new];
                            for (XMNAssetModel * assModel in tempMuArray) {
                                BOOL isHave = NO;
                                for (XMNAssetModel * assModel2 in tempMuArray2) {
                                    if ([assModel.imageUrl isEqualToString:assModel2.imageUrl]) {
                                        isHave = YES;
                                    }
                                }
                                if (!isHave) {
                                    [tempMuArray2 addObject:assModel];
                                }
                            }
                            
                            //给匹配到的相册对象排序
                            NSMutableArray * tempMuArray3 = [NSMutableArray new];
                            for (int i = self.selectMaterialInDbArray.count - 1; i >= 0; i--) {
                                NewOrderVideoMaterial *newOrderVideoMaterial = self.selectMaterialInDbArray[i];
                                for (XMNAssetModel * assModel in tempMuArray2) {
                                    if ([newOrderVideoMaterial.material_assetsURL isEqualToString:assModel.imageUrl]) {
                                        [tempMuArray3 addObject:assModel];
                                    }
                                }
                            }
                            
                            weakSelf.selectedAssets = [tempMuArray3 copy];
                            weakSelf.assets = [(NSMutableArray *)[[tempMuArray3 reverseObjectEnumerator] allObjects] copy];
                            MAINQUEUEUPDATEUI({
                                [weakSelf.collectionView reloadData];
                                if (tempMuArray3.count > self.currentIndex) {
                                    [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:self.currentIndex inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
                                }
                                [CustomeClass hudHiddenWithView:weakSelf.view Tag:123];
                            })
                        }
                        
                        i++;
                    }];
                }
            }];
        }, {})
    }

    
    self.automaticallyAdjustsScrollViewInsets = NO;
    self.view.backgroundColor = [UIColor blackColor];
    
    [self _setup];
    [self _setupCollectionView];
    
    // Do any additional setup after loading the view.
    [self.bottomBar setTimeViewHidden:YES];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [self.navigationController setNavigationBarHidden:YES];
    if (self.isShowSelectButton && self.assets.count > self.currentIndex) {
         [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:self.currentIndex inSection:0] atScrollPosition:UICollectionViewScrollPositionCenteredHorizontally animated:NO];
    }
}

- (void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    [self.navigationController setNavigationBarHidden:NO];
}

- (BOOL)prefersStatusBarHidden {
    return NO;
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}

- (void)dealloc {
    NSLog(@"preview dealloc");
}

#pragma mark - Methods

- (void)_setup {
    [self.view addSubview:self.topBar];
    [self.view addSubview:self.bottomBar];
    [self _updateTopBarStatus];
    if (self.isShowSelectButton) {
        [self.bottomBar updateBottomBarWithAssets:self.selectedAssets];
    }
    [self _setupConstraints];
}

- (void)_setupCollectionView {
    
    [self.collectionView registerClass:[XMNPhotoPreviewCell class] forCellWithReuseIdentifier:kXMNPhotoPreviewIdentifier];
    self.collectionView.backgroundColor = [UIColor blackColor];
    self.collectionView.scrollsToTop = NO;
    self.collectionView.showsHorizontalScrollIndicator = NO;
    self.collectionView.contentSize = CGSizeMake(self.view.frame.size.width * self.assets.count, self.view.frame.size.height);
    self.collectionView.pagingEnabled = YES;
    
}

- (void)_setupConstraints {
    
    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.bottomBar attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeLeft multiplier:1.0f constant:0.0f]];
    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.bottomBar attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeRight multiplier:1.0f constant:0.0f]];
    
    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.bottomBar attribute:NSLayoutAttributeBottom relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeBottom multiplier:1.0f constant:0.0f]];
    
    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.bottomBar attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual toItem:nil attribute:NSLayoutAttributeNotAnAttribute multiplier:1.0f constant:50.0f]];
}

- (void)_handleBackAction {
    self.didFinishPreviewBlock ? self.didFinishPreviewBlock(self.selectedAssets) : nil;
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)_handleStateChangeAction {
    if (self.stateButton.selected) {
        [self.selectedAssets removeObject:self.assets[self.currentIndex]];
        self.assets[self.currentIndex].selected = NO;
        [self _updateTopBarStatus];
        //通知相关界面移除被用户取消的选项
//        POSTNOTI(REMOVESELECTIMAGE, @{REMOVEIAMGEKEY:self.assets[self.currentIndex]});
        MAINQUEUEUPDATEUI({
            ALERT(@"素材已添加")
        })
    }else {
        if (self.selectedAssets.count < self.maxCount) {
            self.assets[self.currentIndex].selected = YES;
            [self.selectedAssets addObject:self.assets[self.currentIndex]];
            [self _updateTopBarStatus];
            [UIView animationWithLayer:self.stateButton.layer type:XMNAnimationTypeBigger];
        }else {
            //TODO 超过最大数量
            [self showAlertWithMessage:[NSString stringWithFormat:@"最多只能选择%ld个素材",(unsigned long)self.maxCount]];
        }
    }
    if (self.isShowSelectButton) {
        [self.bottomBar updateBottomBarWithAssets:self.selectedAssets];
    }
    
}

- (void)_updateTopBarStatus {
    XMNAssetModel *asset = self.assets[self.currentIndex];
    self.stateButton.selected = asset.selected;
    
}

- (void)_setBarHidden:(BOOL)hidden animated:(BOOL)animated {
    if (!animated) {
        self.topBar.hidden = self.bottomBar.hidden = hidden;
        return;
    }
    [UIView animateWithDuration:.15 animations:^{
        self.topBar.alpha = self.bottomBar.alpha = hidden ? .0f : 1.0f;
    } completion:^(BOOL finished) {
        self.topBar.hidden = self.bottomBar.hidden = hidden;
    }];
}

#pragma mark - UIScrollViewDelegate

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
    CGPoint offSet = scrollView.contentOffset;
    self.currentIndex = offSet.x / self.view.frame.size.width;
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    [self _updateTopBarStatus];
}


#pragma mark <UICollectionViewDataSource>

- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}


- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return self.assets.count;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    XMNPhotoPreviewCell *previewCell = [collectionView dequeueReusableCellWithReuseIdentifier:kXMNPhotoPreviewIdentifier forIndexPath:indexPath];
    
    XMNAssetModel * assModel = self.assets[indexPath.row];
    
    
    [previewCell configCellWithItem:assModel];
    __weak typeof(*&self) wSelf = self;
    [previewCell setSingleTapBlock:^{
        __weak typeof(*&self) self = wSelf;
        [self _setBarHidden:!self.topBar.hidden animated:YES];
        

    }];
    
    [previewCell setSetPlayer:^{
        __weak typeof(*&self) wSelf = self;
            [[XMNPhotoManager sharedManager] getVideoInfoWithAsset:assModel.asset completionBlock:^(AVPlayerItem *playerItem, NSDictionary *playetItemInfo) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    __weak typeof(*&self) self = wSelf;
                    self.playItem = nil;
                    self.player = nil;
                    self.playerLayer = nil;
                    self.player = [AVPlayer playerWithPlayerItem:playerItem];
                    self.playerLayer = [AVPlayerLayer playerLayerWithPlayer:self.player];
                    self.playerLayer.frame = self.view.bounds;
                    [self.view.layer addSublayer:self.playerLayer];
                    [self.player play];
                    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(pausePlayer) name:AVPlayerItemDidPlayToEndTimeNotification object:nil];
                    UIView * tapView = [[UIView alloc] initWithFrame:self.view.bounds];
                    [self.view addSubview:tapView];
                    tapView.backgroundColor = [UIColor clearColor];
                    tapView.tag = 123456;
                    ADDTAPGESTURE(tapView, removePlayer);
                });
            }];
    }];
    if (assModel.type == XMNAssetTypePhoto) {
        [previewCell setPlayButtonHidden:YES];
    }
    return previewCell;
}

- (void)pausePlayer{
    [self _setBarHidden:!self.topBar.hidden animated:YES];
    [self.player.currentItem cancelPendingSeeks];
    [self.player.currentItem.asset cancelLoading];
    [self.player pause];
    [self.playerLayer removeFromSuperlayer];
}

- (void)removePlayer:(UITapGestureRecognizer *)tap{
    [self pausePlayer];
    UIView * tapView = tap.view;
    [tapView removeFromSuperview];
}

/// ========================================
/// @name   重写了collection的两个代理方法,通过预加载
/// 释放 previewImage 来节约内存
/// ========================================

- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath {
    
//    XMNPhotoPreviewCell * previewCell = [collectionView dequeueReusableCellWithReuseIdentifier:kXMNPhotoPreviewIdentifier forIndexPath:indexPath];
//    [previewCell _pausePlayer];
//    [previewCell removeAllView];
    
    XMNAssetModel *model = self.assets[indexPath.row];
    model.previewImage = nil;
}

- (void)collectionView:(UICollectionView *)collectionView willDisplayCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath {
    
    XMNAssetModel *model = self.assets[indexPath.row];
    [model previewImage];
}

#pragma mark - Getters

- (UIView *)topBar {
    if (!_topBar) {
        
        CGFloat originY = iOS7Later ? 20 : 0;
        _topBar = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, originY + 44)];
        _topBar.backgroundColor = [UIColor colorWithRed:34/255.0f green:34/255.0f blue:34/255.0f alpha:.7f];
        
        UIButton *backButton  = [UIButton buttonWithType:UIButtonTypeCustom];
        [backButton setImage:[UIImage imageNamed:@"navigation_back"] forState:UIControlStateNormal];
        [backButton setContentEdgeInsets:UIEdgeInsetsMake(0, 10, 0, 10)];
        [backButton sizeToFit];
        backButton.frame = CGRectMake(12, _topBar.frame.size.height/2 - backButton.frame.size.height/2 + originY/2, backButton.frame.size.width, backButton.frame.size.height);
        [backButton addTarget:self action:@selector(_handleBackAction) forControlEvents:UIControlEventTouchUpInside];
        [_topBar addSubview:backButton];
        
        if (self.isShowSelectButton) {
            UIButton *stateButton  = [UIButton buttonWithType:UIButtonTypeCustom];
            [stateButton setImage:[UIImage imageNamed:@"photo_state_normal"] forState:UIControlStateNormal];
            [stateButton setImage:[UIImage imageNamed:@"photo_state_selected"] forState:UIControlStateSelected];
            [stateButton setContentEdgeInsets:UIEdgeInsetsMake(0, 10, 0, 10)];
            [stateButton sizeToFit];
            stateButton.frame = CGRectMake(_topBar.frame.size.width - 12 - stateButton.frame.size.width, _topBar.frame.size.height/2 - stateButton.frame.size.height/2 + originY/2, stateButton.frame.size.width, stateButton.frame.size.height);
            
            [stateButton addTarget:self action:@selector(_handleStateChangeAction) forControlEvents:UIControlEventTouchUpInside];
            [_topBar addSubview:self.stateButton = stateButton];
        }
    }
    return _topBar;
}

- (XMNBottomBar *)bottomBar {
    if (!_bottomBar) {
        _bottomBar = [[XMNBottomBar alloc] initWithBarType:XMNPreviewBottomBar];
        
        if (!self.isShowSelectButton) {
            [_bottomBar setConfirmButtonHidden:YES];
        }
        
        _bottomBar.translatesAutoresizingMaskIntoConstraints = NO;
        if (self.isShowSelectButton) {
           [_bottomBar updateBottomBarWithAssets:self.selectedAssets];
        }
        
        
        __weak typeof(*&self) wSelf = self;
        [_bottomBar setConfirmBlock:^{
            __weak typeof(*&self) self = wSelf;
            NSMutableArray *images = [NSMutableArray array];
            [self.selectedAssets enumerateObjectsUsingBlock:^(XMNAssetModel * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                [images addObject:obj];
            }];
            self.didFinishPickingBlock ? self.didFinishPickingBlock(images,self.selectedAssets) : nil;
        }];
    }
    return _bottomBar;
}


+ (UICollectionViewLayout *)photoPreviewViewLayoutWithSize:(CGSize)size {
    UICollectionViewFlowLayout *layout = [[UICollectionViewFlowLayout alloc] init];
    layout.scrollDirection = UICollectionViewScrollDirectionHorizontal;
    
    layout.itemSize = CGSizeMake(size.width, size.height);
    layout.minimumInteritemSpacing = 0;
    layout.minimumLineSpacing = 0;
    return layout;
}


@end
